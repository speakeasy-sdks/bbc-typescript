/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as operations from "../models/operations";

export enum GetAPIsAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export enum GetXSDAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export class Schema extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Get API definition
     *
     * @remarks
     * Get API definition
     */
    async getAPIs(
        options?: RequestOptions & { acceptHeaderOverride?: GetAPIsAcceptEnum }
    ): Promise<operations.GetAPIResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const path$ = this.templateURLComponent("/")();

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getAPI",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetAPIResponse>()
            .void(200, operations.GetAPIResponse$)
            .fail(["4XX", "5XX"])
            .json("default", operations.GetAPIResponse$, { key: "ErrorModel" })
            .bytes("default", operations.GetAPIResponse$, { ctype: "application/xml", key: "Body" })
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get Schema definition
     *
     * @remarks
     * Get Schema definition
     */
    async getXSD(
        options?: RequestOptions & { acceptHeaderOverride?: GetXSDAcceptEnum }
    ): Promise<operations.GetXSDResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const path$ = this.templateURLComponent("/schema")();

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getXSD",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetXSDResponse>()
            .void(200, operations.GetXSDResponse$)
            .fail(["4XX", "5XX"])
            .json("default", operations.GetXSDResponse$, { key: "ErrorModel" })
            .bytes("default", operations.GetXSDResponse$, { ctype: "application/xml", key: "Body" })
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }
}
