/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type DependencyOn = {
    filter?: string | undefined;
    value?: string | undefined;
};

/** @internal */
export namespace DependencyOn$ {
    export const inboundSchema: z.ZodType<DependencyOn, z.ZodTypeDef, unknown> = z
        .object({
            filter: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.filter === undefined ? null : { filter: v.filter }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        filter?: string | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DependencyOn> = z
        .object({
            filter: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.filter === undefined ? null : { filter: v.filter }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}
