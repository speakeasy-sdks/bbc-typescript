/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Option, Option$ } from "./option";
import { Prohibits, Prohibits$ } from "./prohibits";
import { ReleaseStatusType, ReleaseStatusType$ } from "./releasestatustype";
import * as z from "zod";

export type Filter = {
    default?: string | undefined;
    dependsOn?: string | undefined;
    deprecated?: boolean | undefined;
    deprecatedSince?: string | undefined;
    guaranteedUntil?: string | undefined;
    maxValue?: number | undefined;
    minValue?: number | undefined;
    multipleValues?: boolean | undefined;
    name: string;
    option?: Array<Option> | undefined;
    prefer?: string | undefined;
    prohibits?: Array<Prohibits> | undefined;
    releaseStatus?: ReleaseStatusType | undefined;
    replacedBy?: string | undefined;
    required?: boolean | undefined;
    title: string;
    type: string;
};

/** @internal */
export namespace Filter$ {
    export const inboundSchema: z.ZodType<Filter, z.ZodTypeDef, unknown> = z
        .object({
            default: z.string().optional(),
            depends_on: z.string().optional(),
            deprecated: z.boolean().optional(),
            deprecated_since: z.string().optional(),
            guaranteed_until: z.string().optional(),
            max_value: z.number().int().optional(),
            min_value: z.number().int().optional(),
            multiple_values: z.boolean().optional(),
            name: z.string(),
            option: z.array(Option$.inboundSchema).optional(),
            prefer: z.string().optional(),
            prohibits: z.array(Prohibits$.inboundSchema).optional(),
            release_status: ReleaseStatusType$.inboundSchema.optional(),
            replaced_by: z.string().optional(),
            required: z.boolean().optional(),
            title: z.string(),
            type: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.default === undefined ? null : { default: v.default }),
                ...(v.depends_on === undefined ? null : { dependsOn: v.depends_on }),
                ...(v.deprecated === undefined ? null : { deprecated: v.deprecated }),
                ...(v.deprecated_since === undefined
                    ? null
                    : { deprecatedSince: v.deprecated_since }),
                ...(v.guaranteed_until === undefined
                    ? null
                    : { guaranteedUntil: v.guaranteed_until }),
                ...(v.max_value === undefined ? null : { maxValue: v.max_value }),
                ...(v.min_value === undefined ? null : { minValue: v.min_value }),
                ...(v.multiple_values === undefined ? null : { multipleValues: v.multiple_values }),
                name: v.name,
                ...(v.option === undefined ? null : { option: v.option }),
                ...(v.prefer === undefined ? null : { prefer: v.prefer }),
                ...(v.prohibits === undefined ? null : { prohibits: v.prohibits }),
                ...(v.release_status === undefined ? null : { releaseStatus: v.release_status }),
                ...(v.replaced_by === undefined ? null : { replacedBy: v.replaced_by }),
                ...(v.required === undefined ? null : { required: v.required }),
                title: v.title,
                type: v.type,
            };
        });

    export type Outbound = {
        default?: string | undefined;
        depends_on?: string | undefined;
        deprecated?: boolean | undefined;
        deprecated_since?: string | undefined;
        guaranteed_until?: string | undefined;
        max_value?: number | undefined;
        min_value?: number | undefined;
        multiple_values?: boolean | undefined;
        name: string;
        option?: Array<Option$.Outbound> | undefined;
        prefer?: string | undefined;
        prohibits?: Array<Prohibits$.Outbound> | undefined;
        release_status?: string | undefined;
        replaced_by?: string | undefined;
        required?: boolean | undefined;
        title: string;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Filter> = z
        .object({
            default: z.string().optional(),
            dependsOn: z.string().optional(),
            deprecated: z.boolean().optional(),
            deprecatedSince: z.string().optional(),
            guaranteedUntil: z.string().optional(),
            maxValue: z.number().int().optional(),
            minValue: z.number().int().optional(),
            multipleValues: z.boolean().optional(),
            name: z.string(),
            option: z.array(Option$.outboundSchema).optional(),
            prefer: z.string().optional(),
            prohibits: z.array(Prohibits$.outboundSchema).optional(),
            releaseStatus: ReleaseStatusType$.outboundSchema.optional(),
            replacedBy: z.string().optional(),
            required: z.boolean().optional(),
            title: z.string(),
            type: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.default === undefined ? null : { default: v.default }),
                ...(v.dependsOn === undefined ? null : { depends_on: v.dependsOn }),
                ...(v.deprecated === undefined ? null : { deprecated: v.deprecated }),
                ...(v.deprecatedSince === undefined
                    ? null
                    : { deprecated_since: v.deprecatedSince }),
                ...(v.guaranteedUntil === undefined
                    ? null
                    : { guaranteed_until: v.guaranteedUntil }),
                ...(v.maxValue === undefined ? null : { max_value: v.maxValue }),
                ...(v.minValue === undefined ? null : { min_value: v.minValue }),
                ...(v.multipleValues === undefined ? null : { multiple_values: v.multipleValues }),
                name: v.name,
                ...(v.option === undefined ? null : { option: v.option }),
                ...(v.prefer === undefined ? null : { prefer: v.prefer }),
                ...(v.prohibits === undefined ? null : { prohibits: v.prohibits }),
                ...(v.releaseStatus === undefined ? null : { release_status: v.releaseStatus }),
                ...(v.replacedBy === undefined ? null : { replaced_by: v.replacedBy }),
                ...(v.required === undefined ? null : { required: v.required }),
                title: v.title,
                type: v.type,
            };
        });
}
