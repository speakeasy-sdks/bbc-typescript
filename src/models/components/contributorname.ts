/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ContributorNameNameName = {
    family?: string | undefined;
    given?: string | undefined;
    lang?: string | undefined;
    presentation?: string | undefined;
    title?: string | undefined;
};

export type ContributorNameName = {
    family?: string | undefined;
    given?: string | undefined;
    lang?: string | undefined;
    name: ContributorNameNameName;
    presentation?: string | undefined;
    title?: string | undefined;
};

export type ContributorName = {
    name: ContributorNameName;
};

/** @internal */
export namespace ContributorNameNameName$ {
    export const inboundSchema: z.ZodType<ContributorNameNameName, z.ZodTypeDef, unknown> = z
        .object({
            family: z.string().optional(),
            given: z.string().optional(),
            lang: z.string().optional(),
            presentation: z.string().optional(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.family === undefined ? null : { family: v.family }),
                ...(v.given === undefined ? null : { given: v.given }),
                ...(v.lang === undefined ? null : { lang: v.lang }),
                ...(v.presentation === undefined ? null : { presentation: v.presentation }),
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });

    export type Outbound = {
        family?: string | undefined;
        given?: string | undefined;
        lang?: string | undefined;
        presentation?: string | undefined;
        title?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContributorNameNameName> = z
        .object({
            family: z.string().optional(),
            given: z.string().optional(),
            lang: z.string().optional(),
            presentation: z.string().optional(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.family === undefined ? null : { family: v.family }),
                ...(v.given === undefined ? null : { given: v.given }),
                ...(v.lang === undefined ? null : { lang: v.lang }),
                ...(v.presentation === undefined ? null : { presentation: v.presentation }),
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });
}

/** @internal */
export namespace ContributorNameName$ {
    export const inboundSchema: z.ZodType<ContributorNameName, z.ZodTypeDef, unknown> = z
        .object({
            family: z.string().optional(),
            given: z.string().optional(),
            lang: z.string().optional(),
            name: z.lazy(() => ContributorNameNameName$.inboundSchema),
            presentation: z.string().optional(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.family === undefined ? null : { family: v.family }),
                ...(v.given === undefined ? null : { given: v.given }),
                ...(v.lang === undefined ? null : { lang: v.lang }),
                name: v.name,
                ...(v.presentation === undefined ? null : { presentation: v.presentation }),
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });

    export type Outbound = {
        family?: string | undefined;
        given?: string | undefined;
        lang?: string | undefined;
        name: ContributorNameNameName$.Outbound;
        presentation?: string | undefined;
        title?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContributorNameName> = z
        .object({
            family: z.string().optional(),
            given: z.string().optional(),
            lang: z.string().optional(),
            name: z.lazy(() => ContributorNameNameName$.outboundSchema),
            presentation: z.string().optional(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.family === undefined ? null : { family: v.family }),
                ...(v.given === undefined ? null : { given: v.given }),
                ...(v.lang === undefined ? null : { lang: v.lang }),
                name: v.name,
                ...(v.presentation === undefined ? null : { presentation: v.presentation }),
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });
}

/** @internal */
export namespace ContributorName$ {
    export const inboundSchema: z.ZodType<ContributorName, z.ZodTypeDef, unknown> = z
        .object({
            name: z.lazy(() => ContributorNameName$.inboundSchema),
        })
        .transform((v) => {
            return {
                name: v.name,
            };
        });

    export type Outbound = {
        name: ContributorNameName$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContributorName> = z
        .object({
            name: z.lazy(() => ContributorNameName$.outboundSchema),
        })
        .transform((v) => {
            return {
                name: v.name,
            };
        });
}
