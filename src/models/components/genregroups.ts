/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { GenreGroup, GenreGroup$ } from "./genregroup";
import * as z from "zod";

export type GenreGroups = {
    href: string;
    resultType: string;
    deprecated: boolean;
    deprecatedSince: string;
    replacedBy: string;
    genreGroup?: Array<GenreGroup> | undefined;
    additionalProperties: { [k: string]: any };
};

/** @internal */
export namespace GenreGroups$ {
    export const inboundSchema: z.ZodType<GenreGroups, z.ZodTypeDef, unknown> = z
        .object({
            href: z.string(),
            result_type: z.string(),
            deprecated: z.boolean(),
            deprecated_since: z.string(),
            replaced_by: z.string(),
            genre_group: z.array(GenreGroup$.inboundSchema).optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const {
                href,
                result_type,
                deprecated,
                deprecated_since,
                replaced_by,
                genre_group,
                ...additionalProperties
            } = v;

            return {
                href: v.href,
                resultType: v.result_type,
                deprecated: v.deprecated,
                deprecatedSince: v.deprecated_since,
                replacedBy: v.replaced_by,
                ...(v.genre_group === undefined ? null : { genreGroup: v.genre_group }),
                additionalProperties,
            };
        });

    export type Outbound = {
        href: string;
        result_type: string;
        deprecated: boolean;
        deprecated_since: string;
        replaced_by: string;
        genre_group?: Array<GenreGroup$.Outbound> | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GenreGroups> = z
        .object({
            href: z.string(),
            resultType: z.string(),
            deprecated: z.boolean(),
            deprecatedSince: z.string(),
            replacedBy: z.string(),
            genreGroup: z.array(GenreGroup$.outboundSchema).optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                href: v.href,
                result_type: v.resultType,
                deprecated: v.deprecated,
                deprecated_since: v.deprecatedSince,
                replaced_by: v.replacedBy,
                ...(v.genreGroup === undefined ? null : { genre_group: v.genreGroup }),
            };
        });
}
