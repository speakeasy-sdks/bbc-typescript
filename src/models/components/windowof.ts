/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type WindowOf = {
    href?: string | undefined;
    pid: string;
    position?: number | undefined;
    resultType: string;
};

/** @internal */
export namespace WindowOf$ {
    export const inboundSchema: z.ZodType<WindowOf, z.ZodTypeDef, unknown> = z
        .object({
            href: z.string().optional(),
            pid: z.string(),
            position: z.number().int().optional(),
            result_type: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.href === undefined ? null : { href: v.href }),
                pid: v.pid,
                ...(v.position === undefined ? null : { position: v.position }),
                resultType: v.result_type,
            };
        });

    export type Outbound = {
        href?: string | undefined;
        pid: string;
        position?: number | undefined;
        result_type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WindowOf> = z
        .object({
            href: z.string().optional(),
            pid: z.string(),
            position: z.number().int().optional(),
            resultType: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.href === undefined ? null : { href: v.href }),
                pid: v.pid,
                ...(v.position === undefined ? null : { position: v.position }),
                result_type: v.resultType,
            };
        });
}
