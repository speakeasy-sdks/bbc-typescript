/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type VersionTypesWithIdVersionType = {
    id?: string | undefined;
};

export type VersionTypesWithIdVersionTypes = {
    versionType: Array<VersionTypesWithIdVersionType>;
};

export type VersionType = {
    id?: string | undefined;
    versionTypes: VersionTypesWithIdVersionTypes;
};

export type VersionTypes = {
    versionType: Array<VersionType>;
};

export type VersionTypesWithId = {
    versionTypes: VersionTypes;
};

/** @internal */
export namespace VersionTypesWithIdVersionType$ {
    export const inboundSchema: z.ZodType<VersionTypesWithIdVersionType, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VersionTypesWithIdVersionType> =
        z
            .object({
                id: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                };
            });
}

/** @internal */
export namespace VersionTypesWithIdVersionTypes$ {
    export const inboundSchema: z.ZodType<VersionTypesWithIdVersionTypes, z.ZodTypeDef, unknown> = z
        .object({
            version_type: z.array(z.lazy(() => VersionTypesWithIdVersionType$.inboundSchema)),
        })
        .transform((v) => {
            return {
                versionType: v.version_type,
            };
        });

    export type Outbound = {
        version_type: Array<VersionTypesWithIdVersionType$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VersionTypesWithIdVersionTypes> =
        z
            .object({
                versionType: z.array(z.lazy(() => VersionTypesWithIdVersionType$.outboundSchema)),
            })
            .transform((v) => {
                return {
                    version_type: v.versionType,
                };
            });
}

/** @internal */
export namespace VersionType$ {
    export const inboundSchema: z.ZodType<VersionType, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string().optional(),
            version_types: z.lazy(() => VersionTypesWithIdVersionTypes$.inboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                versionTypes: v.version_types,
            };
        });

    export type Outbound = {
        id?: string | undefined;
        version_types: VersionTypesWithIdVersionTypes$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VersionType> = z
        .object({
            id: z.string().optional(),
            versionTypes: z.lazy(() => VersionTypesWithIdVersionTypes$.outboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                version_types: v.versionTypes,
            };
        });
}

/** @internal */
export namespace VersionTypes$ {
    export const inboundSchema: z.ZodType<VersionTypes, z.ZodTypeDef, unknown> = z
        .object({
            version_type: z.array(z.lazy(() => VersionType$.inboundSchema)),
        })
        .transform((v) => {
            return {
                versionType: v.version_type,
            };
        });

    export type Outbound = {
        version_type: Array<VersionType$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VersionTypes> = z
        .object({
            versionType: z.array(z.lazy(() => VersionType$.outboundSchema)),
        })
        .transform((v) => {
            return {
                version_type: v.versionType,
            };
        });
}

/** @internal */
export namespace VersionTypesWithId$ {
    export const inboundSchema: z.ZodType<VersionTypesWithId, z.ZodTypeDef, unknown> = z
        .object({
            version_types: z.lazy(() => VersionTypes$.inboundSchema),
        })
        .transform((v) => {
            return {
                versionTypes: v.version_types,
            };
        });

    export type Outbound = {
        version_types: VersionTypes$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VersionTypesWithId> = z
        .object({
            versionTypes: z.lazy(() => VersionTypes$.outboundSchema),
        })
        .transform((v) => {
            return {
                version_types: v.versionTypes,
            };
        });
}
