/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DateRange, DateRange$ } from "./daterange";
import { Identifiers, Identifiers$ } from "./identifiers";
import { Ids, Ids$ } from "./ids";
import { MasterBrandLink, MasterBrandLink$ } from "./masterbrandlink";
import { MediaType, MediaType$ } from "./mediatype";
import * as z from "zod";

export type Service = {
    dateRange?: DateRange | undefined;
    description?: string | undefined;
    identifiers?: Identifiers | undefined;
    ids?: Ids | undefined;
    isConcrete?: boolean | undefined;
    isDownloadable?: boolean | undefined;
    isStreamable?: boolean | undefined;
    masterBrandLink?: MasterBrandLink | undefined;
    mediaType?: MediaType | undefined;
    name?: string | undefined;
    partner: string;
    region?: string | undefined;
    sid: string;
    type?: string | undefined;
    updatedTime?: Date | undefined;
};

/** @internal */
export namespace Service$ {
    export const inboundSchema: z.ZodType<Service, z.ZodTypeDef, unknown> = z
        .object({
            date_range: DateRange$.inboundSchema.optional(),
            description: z.string().optional(),
            identifiers: Identifiers$.inboundSchema.optional(),
            ids: Ids$.inboundSchema.optional(),
            is_concrete: z.boolean().optional(),
            is_downloadable: z.boolean().optional(),
            is_streamable: z.boolean().optional(),
            master_brand_link: MasterBrandLink$.inboundSchema.optional(),
            media_type: MediaType$.inboundSchema.optional(),
            name: z.string().optional(),
            partner: z.string(),
            region: z.string().optional(),
            sid: z.string(),
            type: z.string().optional(),
            updated_time: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.date_range === undefined ? null : { dateRange: v.date_range }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.identifiers === undefined ? null : { identifiers: v.identifiers }),
                ...(v.ids === undefined ? null : { ids: v.ids }),
                ...(v.is_concrete === undefined ? null : { isConcrete: v.is_concrete }),
                ...(v.is_downloadable === undefined ? null : { isDownloadable: v.is_downloadable }),
                ...(v.is_streamable === undefined ? null : { isStreamable: v.is_streamable }),
                ...(v.master_brand_link === undefined
                    ? null
                    : { masterBrandLink: v.master_brand_link }),
                ...(v.media_type === undefined ? null : { mediaType: v.media_type }),
                ...(v.name === undefined ? null : { name: v.name }),
                partner: v.partner,
                ...(v.region === undefined ? null : { region: v.region }),
                sid: v.sid,
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.updated_time === undefined ? null : { updatedTime: v.updated_time }),
            };
        });

    export type Outbound = {
        date_range?: DateRange$.Outbound | undefined;
        description?: string | undefined;
        identifiers?: Identifiers$.Outbound | undefined;
        ids?: Ids$.Outbound | undefined;
        is_concrete?: boolean | undefined;
        is_downloadable?: boolean | undefined;
        is_streamable?: boolean | undefined;
        master_brand_link?: MasterBrandLink$.Outbound | undefined;
        media_type?: string | undefined;
        name?: string | undefined;
        partner: string;
        region?: string | undefined;
        sid: string;
        type?: string | undefined;
        updated_time?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Service> = z
        .object({
            dateRange: DateRange$.outboundSchema.optional(),
            description: z.string().optional(),
            identifiers: Identifiers$.outboundSchema.optional(),
            ids: Ids$.outboundSchema.optional(),
            isConcrete: z.boolean().optional(),
            isDownloadable: z.boolean().optional(),
            isStreamable: z.boolean().optional(),
            masterBrandLink: MasterBrandLink$.outboundSchema.optional(),
            mediaType: MediaType$.outboundSchema.optional(),
            name: z.string().optional(),
            partner: z.string(),
            region: z.string().optional(),
            sid: z.string(),
            type: z.string().optional(),
            updatedTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.dateRange === undefined ? null : { date_range: v.dateRange }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.identifiers === undefined ? null : { identifiers: v.identifiers }),
                ...(v.ids === undefined ? null : { ids: v.ids }),
                ...(v.isConcrete === undefined ? null : { is_concrete: v.isConcrete }),
                ...(v.isDownloadable === undefined ? null : { is_downloadable: v.isDownloadable }),
                ...(v.isStreamable === undefined ? null : { is_streamable: v.isStreamable }),
                ...(v.masterBrandLink === undefined
                    ? null
                    : { master_brand_link: v.masterBrandLink }),
                ...(v.mediaType === undefined ? null : { media_type: v.mediaType }),
                ...(v.name === undefined ? null : { name: v.name }),
                partner: v.partner,
                ...(v.region === undefined ? null : { region: v.region }),
                sid: v.sid,
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.updatedTime === undefined ? null : { updated_time: v.updatedTime }),
            };
        });
}
