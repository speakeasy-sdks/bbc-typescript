/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AvailableSimulcasts, AvailableSimulcasts$ } from "./availablesimulcasts";
import { AvailableVersions, AvailableVersions$ } from "./availableversions";
import { AvailableWebcasts, AvailableWebcasts$ } from "./availablewebcasts";
import { Versions, Versions$ } from "./versions";
import * as z from "zod";

export type VersionsMixin = {
    availableSimulcasts?: AvailableSimulcasts | undefined;
    availableVersions?: AvailableVersions | undefined;
    availableWebcasts?: AvailableWebcasts | undefined;
    versions?: Array<Versions> | undefined;
};

/** @internal */
export namespace VersionsMixin$ {
    export const inboundSchema: z.ZodType<VersionsMixin, z.ZodTypeDef, unknown> = z
        .object({
            available_simulcasts: AvailableSimulcasts$.inboundSchema.optional(),
            available_versions: AvailableVersions$.inboundSchema.optional(),
            available_webcasts: AvailableWebcasts$.inboundSchema.optional(),
            versions: z.array(Versions$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.available_simulcasts === undefined
                    ? null
                    : { availableSimulcasts: v.available_simulcasts }),
                ...(v.available_versions === undefined
                    ? null
                    : { availableVersions: v.available_versions }),
                ...(v.available_webcasts === undefined
                    ? null
                    : { availableWebcasts: v.available_webcasts }),
                ...(v.versions === undefined ? null : { versions: v.versions }),
            };
        });

    export type Outbound = {
        available_simulcasts?: AvailableSimulcasts$.Outbound | undefined;
        available_versions?: AvailableVersions$.Outbound | undefined;
        available_webcasts?: AvailableWebcasts$.Outbound | undefined;
        versions?: Array<Versions$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VersionsMixin> = z
        .object({
            availableSimulcasts: AvailableSimulcasts$.outboundSchema.optional(),
            availableVersions: AvailableVersions$.outboundSchema.optional(),
            availableWebcasts: AvailableWebcasts$.outboundSchema.optional(),
            versions: z.array(Versions$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.availableSimulcasts === undefined
                    ? null
                    : { available_simulcasts: v.availableSimulcasts }),
                ...(v.availableVersions === undefined
                    ? null
                    : { available_versions: v.availableVersions }),
                ...(v.availableWebcasts === undefined
                    ? null
                    : { available_webcasts: v.availableWebcasts }),
                ...(v.versions === undefined ? null : { versions: v.versions }),
            };
        });
}
