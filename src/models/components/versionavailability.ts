/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AvailableMediaSets, AvailableMediaSets$ } from "./availablemediasets";
import * as z from "zod";

export type VersionAvailabilityAvailabilityAvailability = {
    availabilityEnd?: Date | undefined;
    availabilityStart?: Date | undefined;
    availableMediaSets: AvailableMediaSets;
    status?: string | undefined;
};

export type VersionAvailabilityAvailability = {
    availability: VersionAvailabilityAvailabilityAvailability;
    availabilityEnd?: Date | undefined;
    availabilityStart?: Date | undefined;
    availableMediaSets: AvailableMediaSets;
    status?: string | undefined;
};

export type VersionAvailability = {
    availability: VersionAvailabilityAvailability;
};

/** @internal */
export namespace VersionAvailabilityAvailabilityAvailability$ {
    export const inboundSchema: z.ZodType<
        VersionAvailabilityAvailabilityAvailability,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            availability_end: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            availability_start: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            available_media_sets: AvailableMediaSets$.inboundSchema,
            status: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.availability_end === undefined
                    ? null
                    : { availabilityEnd: v.availability_end }),
                ...(v.availability_start === undefined
                    ? null
                    : { availabilityStart: v.availability_start }),
                availableMediaSets: v.available_media_sets,
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        availability_end?: string | undefined;
        availability_start?: string | undefined;
        available_media_sets: AvailableMediaSets$.Outbound;
        status?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        VersionAvailabilityAvailabilityAvailability
    > = z
        .object({
            availabilityEnd: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            availabilityStart: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            availableMediaSets: AvailableMediaSets$.outboundSchema,
            status: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.availabilityEnd === undefined
                    ? null
                    : { availability_end: v.availabilityEnd }),
                ...(v.availabilityStart === undefined
                    ? null
                    : { availability_start: v.availabilityStart }),
                available_media_sets: v.availableMediaSets,
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

/** @internal */
export namespace VersionAvailabilityAvailability$ {
    export const inboundSchema: z.ZodType<VersionAvailabilityAvailability, z.ZodTypeDef, unknown> =
        z
            .object({
                availability: z.lazy(
                    () => VersionAvailabilityAvailabilityAvailability$.inboundSchema
                ),
                availability_end: z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
                    .optional(),
                availability_start: z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
                    .optional(),
                available_media_sets: AvailableMediaSets$.inboundSchema,
                status: z.string().optional(),
            })
            .transform((v) => {
                return {
                    availability: v.availability,
                    ...(v.availability_end === undefined
                        ? null
                        : { availabilityEnd: v.availability_end }),
                    ...(v.availability_start === undefined
                        ? null
                        : { availabilityStart: v.availability_start }),
                    availableMediaSets: v.available_media_sets,
                    ...(v.status === undefined ? null : { status: v.status }),
                };
            });

    export type Outbound = {
        availability: VersionAvailabilityAvailabilityAvailability$.Outbound;
        availability_end?: string | undefined;
        availability_start?: string | undefined;
        available_media_sets: AvailableMediaSets$.Outbound;
        status?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        VersionAvailabilityAvailability
    > = z
        .object({
            availability: z.lazy(() => VersionAvailabilityAvailabilityAvailability$.outboundSchema),
            availabilityEnd: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            availabilityStart: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            availableMediaSets: AvailableMediaSets$.outboundSchema,
            status: z.string().optional(),
        })
        .transform((v) => {
            return {
                availability: v.availability,
                ...(v.availabilityEnd === undefined
                    ? null
                    : { availability_end: v.availabilityEnd }),
                ...(v.availabilityStart === undefined
                    ? null
                    : { availability_start: v.availabilityStart }),
                available_media_sets: v.availableMediaSets,
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

/** @internal */
export namespace VersionAvailability$ {
    export const inboundSchema: z.ZodType<VersionAvailability, z.ZodTypeDef, unknown> = z
        .object({
            availability: z.lazy(() => VersionAvailabilityAvailability$.inboundSchema),
        })
        .transform((v) => {
            return {
                availability: v.availability,
            };
        });

    export type Outbound = {
        availability: VersionAvailabilityAvailability$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VersionAvailability> = z
        .object({
            availability: z.lazy(() => VersionAvailabilityAvailability$.outboundSchema),
        })
        .transform((v) => {
            return {
                availability: v.availability,
            };
        });
}
