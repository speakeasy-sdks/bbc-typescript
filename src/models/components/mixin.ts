/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AffectedBy, AffectedBy$ } from "./affectedby";
import { DependencyOn, DependencyOn$ } from "./dependencyon";
import { Prohibits, Prohibits$ } from "./prohibits";
import { ReleaseStatusType, ReleaseStatusType$ } from "./releasestatustype";
import * as z from "zod";

export type Mixin = {
    affectedBy?: Array<AffectedBy> | undefined;
    dependencyOn?: Array<DependencyOn> | undefined;
    dependsOn?: string | undefined;
    deprecated?: boolean | undefined;
    deprecatedSince?: string | undefined;
    guaranteedUntil?: string | undefined;
    href?: string | undefined;
    name: string;
    prohibits?: Array<Prohibits> | undefined;
    releaseStatus?: ReleaseStatusType | undefined;
    replacedBy?: string | undefined;
    title: string;
};

/** @internal */
export namespace Mixin$ {
    export const inboundSchema: z.ZodType<Mixin, z.ZodTypeDef, unknown> = z
        .object({
            affected_by: z.array(AffectedBy$.inboundSchema).optional(),
            dependency_on: z.array(DependencyOn$.inboundSchema).optional(),
            depends_on: z.string().optional(),
            deprecated: z.boolean().optional(),
            deprecated_since: z.string().optional(),
            guaranteed_until: z.string().optional(),
            href: z.string().optional(),
            name: z.string(),
            prohibits: z.array(Prohibits$.inboundSchema).optional(),
            release_status: ReleaseStatusType$.inboundSchema.optional(),
            replaced_by: z.string().optional(),
            title: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.affected_by === undefined ? null : { affectedBy: v.affected_by }),
                ...(v.dependency_on === undefined ? null : { dependencyOn: v.dependency_on }),
                ...(v.depends_on === undefined ? null : { dependsOn: v.depends_on }),
                ...(v.deprecated === undefined ? null : { deprecated: v.deprecated }),
                ...(v.deprecated_since === undefined
                    ? null
                    : { deprecatedSince: v.deprecated_since }),
                ...(v.guaranteed_until === undefined
                    ? null
                    : { guaranteedUntil: v.guaranteed_until }),
                ...(v.href === undefined ? null : { href: v.href }),
                name: v.name,
                ...(v.prohibits === undefined ? null : { prohibits: v.prohibits }),
                ...(v.release_status === undefined ? null : { releaseStatus: v.release_status }),
                ...(v.replaced_by === undefined ? null : { replacedBy: v.replaced_by }),
                title: v.title,
            };
        });

    export type Outbound = {
        affected_by?: Array<AffectedBy$.Outbound> | undefined;
        dependency_on?: Array<DependencyOn$.Outbound> | undefined;
        depends_on?: string | undefined;
        deprecated?: boolean | undefined;
        deprecated_since?: string | undefined;
        guaranteed_until?: string | undefined;
        href?: string | undefined;
        name: string;
        prohibits?: Array<Prohibits$.Outbound> | undefined;
        release_status?: string | undefined;
        replaced_by?: string | undefined;
        title: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Mixin> = z
        .object({
            affectedBy: z.array(AffectedBy$.outboundSchema).optional(),
            dependencyOn: z.array(DependencyOn$.outboundSchema).optional(),
            dependsOn: z.string().optional(),
            deprecated: z.boolean().optional(),
            deprecatedSince: z.string().optional(),
            guaranteedUntil: z.string().optional(),
            href: z.string().optional(),
            name: z.string(),
            prohibits: z.array(Prohibits$.outboundSchema).optional(),
            releaseStatus: ReleaseStatusType$.outboundSchema.optional(),
            replacedBy: z.string().optional(),
            title: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.affectedBy === undefined ? null : { affected_by: v.affectedBy }),
                ...(v.dependencyOn === undefined ? null : { dependency_on: v.dependencyOn }),
                ...(v.dependsOn === undefined ? null : { depends_on: v.dependsOn }),
                ...(v.deprecated === undefined ? null : { deprecated: v.deprecated }),
                ...(v.deprecatedSince === undefined
                    ? null
                    : { deprecated_since: v.deprecatedSince }),
                ...(v.guaranteedUntil === undefined
                    ? null
                    : { guaranteed_until: v.guaranteedUntil }),
                ...(v.href === undefined ? null : { href: v.href }),
                name: v.name,
                ...(v.prohibits === undefined ? null : { prohibits: v.prohibits }),
                ...(v.releaseStatus === undefined ? null : { release_status: v.releaseStatus }),
                ...(v.replacedBy === undefined ? null : { replaced_by: v.replacedBy }),
                title: v.title,
            };
        });
}
