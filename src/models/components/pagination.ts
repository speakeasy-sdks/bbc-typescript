/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Next, Next$ } from "./next";
import { Previous, Previous$ } from "./previous";
import * as z from "zod";

export type Pagination = {
    next?: Next | undefined;
    previous?: Previous | undefined;
};

/** @internal */
export namespace Pagination$ {
    export const inboundSchema: z.ZodType<Pagination, z.ZodTypeDef, unknown> = z
        .object({
            next: Next$.inboundSchema.optional(),
            previous: Previous$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.previous === undefined ? null : { previous: v.previous }),
            };
        });

    export type Outbound = {
        next?: Next$.Outbound | undefined;
        previous?: Previous$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Pagination> = z
        .object({
            next: Next$.outboundSchema.optional(),
            previous: Previous$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.previous === undefined ? null : { previous: v.previous }),
            };
        });
}
