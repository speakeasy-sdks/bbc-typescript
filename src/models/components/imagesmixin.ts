/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ImagesMixinInheritedFrom = {
    href?: string | undefined;
    resultType?: string | undefined;
};

export type ImagesMixinImagesImage = {
    href?: string | undefined;
    inheritedFrom?: ImagesMixinInheritedFrom | undefined;
    templateUrl: string;
    type?: string | undefined;
};

export type ImagesMixinImages = {
    image?: ImagesMixinImagesImage | undefined;
};

export type InheritedFrom = {
    href?: string | undefined;
    resultType?: string | undefined;
};

export type ImagesMixinImage = {
    href?: string | undefined;
    images: ImagesMixinImages;
    inheritedFrom?: InheritedFrom | undefined;
    templateUrl: string;
    type?: string | undefined;
};

export type Images = {
    image?: ImagesMixinImage | undefined;
};

export type ImagesMixin = {
    images: Images;
};

/** @internal */
export namespace ImagesMixinInheritedFrom$ {
    export const inboundSchema: z.ZodType<ImagesMixinInheritedFrom, z.ZodTypeDef, unknown> = z
        .object({
            href: z.string().optional(),
            result_type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.href === undefined ? null : { href: v.href }),
                ...(v.result_type === undefined ? null : { resultType: v.result_type }),
            };
        });

    export type Outbound = {
        href?: string | undefined;
        result_type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ImagesMixinInheritedFrom> = z
        .object({
            href: z.string().optional(),
            resultType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.href === undefined ? null : { href: v.href }),
                ...(v.resultType === undefined ? null : { result_type: v.resultType }),
            };
        });
}

/** @internal */
export namespace ImagesMixinImagesImage$ {
    export const inboundSchema: z.ZodType<ImagesMixinImagesImage, z.ZodTypeDef, unknown> = z
        .object({
            href: z.string().optional(),
            inherited_from: z.lazy(() => ImagesMixinInheritedFrom$.inboundSchema).optional(),
            template_url: z.string(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.href === undefined ? null : { href: v.href }),
                ...(v.inherited_from === undefined ? null : { inheritedFrom: v.inherited_from }),
                templateUrl: v.template_url,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        href?: string | undefined;
        inherited_from?: ImagesMixinInheritedFrom$.Outbound | undefined;
        template_url: string;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ImagesMixinImagesImage> = z
        .object({
            href: z.string().optional(),
            inheritedFrom: z.lazy(() => ImagesMixinInheritedFrom$.outboundSchema).optional(),
            templateUrl: z.string(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.href === undefined ? null : { href: v.href }),
                ...(v.inheritedFrom === undefined ? null : { inherited_from: v.inheritedFrom }),
                template_url: v.templateUrl,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace ImagesMixinImages$ {
    export const inboundSchema: z.ZodType<ImagesMixinImages, z.ZodTypeDef, unknown> = z
        .object({
            image: z.lazy(() => ImagesMixinImagesImage$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.image === undefined ? null : { image: v.image }),
            };
        });

    export type Outbound = {
        image?: ImagesMixinImagesImage$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ImagesMixinImages> = z
        .object({
            image: z.lazy(() => ImagesMixinImagesImage$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.image === undefined ? null : { image: v.image }),
            };
        });
}

/** @internal */
export namespace InheritedFrom$ {
    export const inboundSchema: z.ZodType<InheritedFrom, z.ZodTypeDef, unknown> = z
        .object({
            href: z.string().optional(),
            result_type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.href === undefined ? null : { href: v.href }),
                ...(v.result_type === undefined ? null : { resultType: v.result_type }),
            };
        });

    export type Outbound = {
        href?: string | undefined;
        result_type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InheritedFrom> = z
        .object({
            href: z.string().optional(),
            resultType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.href === undefined ? null : { href: v.href }),
                ...(v.resultType === undefined ? null : { result_type: v.resultType }),
            };
        });
}

/** @internal */
export namespace ImagesMixinImage$ {
    export const inboundSchema: z.ZodType<ImagesMixinImage, z.ZodTypeDef, unknown> = z
        .object({
            href: z.string().optional(),
            images: z.lazy(() => ImagesMixinImages$.inboundSchema),
            inherited_from: z.lazy(() => InheritedFrom$.inboundSchema).optional(),
            template_url: z.string(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.href === undefined ? null : { href: v.href }),
                images: v.images,
                ...(v.inherited_from === undefined ? null : { inheritedFrom: v.inherited_from }),
                templateUrl: v.template_url,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        href?: string | undefined;
        images: ImagesMixinImages$.Outbound;
        inherited_from?: InheritedFrom$.Outbound | undefined;
        template_url: string;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ImagesMixinImage> = z
        .object({
            href: z.string().optional(),
            images: z.lazy(() => ImagesMixinImages$.outboundSchema),
            inheritedFrom: z.lazy(() => InheritedFrom$.outboundSchema).optional(),
            templateUrl: z.string(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.href === undefined ? null : { href: v.href }),
                images: v.images,
                ...(v.inheritedFrom === undefined ? null : { inherited_from: v.inheritedFrom }),
                template_url: v.templateUrl,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace Images$ {
    export const inboundSchema: z.ZodType<Images, z.ZodTypeDef, unknown> = z
        .object({
            image: z.lazy(() => ImagesMixinImage$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.image === undefined ? null : { image: v.image }),
            };
        });

    export type Outbound = {
        image?: ImagesMixinImage$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Images> = z
        .object({
            image: z.lazy(() => ImagesMixinImage$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.image === undefined ? null : { image: v.image }),
            };
        });
}

/** @internal */
export namespace ImagesMixin$ {
    export const inboundSchema: z.ZodType<ImagesMixin, z.ZodTypeDef, unknown> = z
        .object({
            images: z.lazy(() => Images$.inboundSchema),
        })
        .transform((v) => {
            return {
                images: v.images,
            };
        });

    export type Outbound = {
        images: Images$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ImagesMixin> = z
        .object({
            images: z.lazy(() => Images$.outboundSchema),
        })
        .transform((v) => {
            return {
                images: v.images,
            };
        });
}
