/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Synopses = {
    long?: string | undefined;
    medium?: string | undefined;
    short?: string | undefined;
};

/** @internal */
export namespace Synopses$ {
    export const inboundSchema: z.ZodType<Synopses, z.ZodTypeDef, unknown> = z
        .object({
            long: z.string().optional(),
            medium: z.string().optional(),
            short: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.long === undefined ? null : { long: v.long }),
                ...(v.medium === undefined ? null : { medium: v.medium }),
                ...(v.short === undefined ? null : { short: v.short }),
            };
        });

    export type Outbound = {
        long?: string | undefined;
        medium?: string | undefined;
        short?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Synopses> = z
        .object({
            long: z.string().optional(),
            medium: z.string().optional(),
            short: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.long === undefined ? null : { long: v.long }),
                ...(v.medium === undefined ? null : { medium: v.medium }),
                ...(v.short === undefined ? null : { short: v.short }),
            };
        });
}
