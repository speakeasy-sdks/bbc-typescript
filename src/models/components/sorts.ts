/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Sort, Sort$ } from "./sort";
import { UnstableSorts, UnstableSorts$ } from "./unstablesorts";
import * as z from "zod";

export type Sorts = {
    sort?: Array<Sort> | undefined;
    unstableSorts?: UnstableSorts | undefined;
};

/** @internal */
export namespace Sorts$ {
    export const inboundSchema: z.ZodType<Sorts, z.ZodTypeDef, unknown> = z
        .object({
            sort: z.array(Sort$.inboundSchema).optional(),
            unstable_sorts: UnstableSorts$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.unstable_sorts === undefined ? null : { unstableSorts: v.unstable_sorts }),
            };
        });

    export type Outbound = {
        sort?: Array<Sort$.Outbound> | undefined;
        unstable_sorts?: UnstableSorts$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Sorts> = z
        .object({
            sort: z.array(Sort$.outboundSchema).optional(),
            unstableSorts: UnstableSorts$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.unstableSorts === undefined ? null : { unstable_sorts: v.unstableSorts }),
            };
        });
}
