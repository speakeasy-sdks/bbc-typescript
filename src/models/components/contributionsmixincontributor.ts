/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    ContributionsMixinContributorName,
    ContributionsMixinContributorName$,
} from "./contributionsmixincontributorname";
import * as z from "zod";

export type ContributionsMixinContributorContributorContributor = {
    contributionsMixinContributorName?: ContributionsMixinContributorName | undefined;
    href?: string | undefined;
    type?: string | undefined;
};

export type ContributionsMixinContributorContributor = {
    contributionsMixinContributorName?: ContributionsMixinContributorName | undefined;
    contributor: ContributionsMixinContributorContributorContributor;
    href?: string | undefined;
    type?: string | undefined;
};

export type ContributionsMixinContributor = {
    contributor: ContributionsMixinContributorContributor;
};

/** @internal */
export namespace ContributionsMixinContributorContributorContributor$ {
    export const inboundSchema: z.ZodType<
        ContributionsMixinContributorContributorContributor,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            contributions_mixin_contributor_name:
                ContributionsMixinContributorName$.inboundSchema.optional(),
            href: z.string().optional(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.contributions_mixin_contributor_name === undefined
                    ? null
                    : {
                          contributionsMixinContributorName: v.contributions_mixin_contributor_name,
                      }),
                ...(v.href === undefined ? null : { href: v.href }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        contributions_mixin_contributor_name?:
            | ContributionsMixinContributorName$.Outbound
            | undefined;
        href?: string | undefined;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ContributionsMixinContributorContributorContributor
    > = z
        .object({
            contributionsMixinContributorName:
                ContributionsMixinContributorName$.outboundSchema.optional(),
            href: z.string().optional(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.contributionsMixinContributorName === undefined
                    ? null
                    : {
                          contributions_mixin_contributor_name: v.contributionsMixinContributorName,
                      }),
                ...(v.href === undefined ? null : { href: v.href }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace ContributionsMixinContributorContributor$ {
    export const inboundSchema: z.ZodType<
        ContributionsMixinContributorContributor,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            contributions_mixin_contributor_name:
                ContributionsMixinContributorName$.inboundSchema.optional(),
            contributor: z.lazy(
                () => ContributionsMixinContributorContributorContributor$.inboundSchema
            ),
            href: z.string().optional(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.contributions_mixin_contributor_name === undefined
                    ? null
                    : {
                          contributionsMixinContributorName: v.contributions_mixin_contributor_name,
                      }),
                contributor: v.contributor,
                ...(v.href === undefined ? null : { href: v.href }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        contributions_mixin_contributor_name?:
            | ContributionsMixinContributorName$.Outbound
            | undefined;
        contributor: ContributionsMixinContributorContributorContributor$.Outbound;
        href?: string | undefined;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ContributionsMixinContributorContributor
    > = z
        .object({
            contributionsMixinContributorName:
                ContributionsMixinContributorName$.outboundSchema.optional(),
            contributor: z.lazy(
                () => ContributionsMixinContributorContributorContributor$.outboundSchema
            ),
            href: z.string().optional(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.contributionsMixinContributorName === undefined
                    ? null
                    : {
                          contributions_mixin_contributor_name: v.contributionsMixinContributorName,
                      }),
                contributor: v.contributor,
                ...(v.href === undefined ? null : { href: v.href }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace ContributionsMixinContributor$ {
    export const inboundSchema: z.ZodType<ContributionsMixinContributor, z.ZodTypeDef, unknown> = z
        .object({
            contributor: z.lazy(() => ContributionsMixinContributorContributor$.inboundSchema),
        })
        .transform((v) => {
            return {
                contributor: v.contributor,
            };
        });

    export type Outbound = {
        contributor: ContributionsMixinContributorContributor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContributionsMixinContributor> =
        z
            .object({
                contributor: z.lazy(() => ContributionsMixinContributorContributor$.outboundSchema),
            })
            .transform((v) => {
                return {
                    contributor: v.contributor,
                };
            });
}
