/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ReleaseStatusType, ReleaseStatusType$ } from "./releasestatustype";
import * as z from "zod";

export type Option = {
    href?: string | undefined;
    releaseStatus?: ReleaseStatusType | undefined;
    title: string;
    value: string;
};

/** @internal */
export namespace Option$ {
    export const inboundSchema: z.ZodType<Option, z.ZodTypeDef, unknown> = z
        .object({
            href: z.string().optional(),
            release_status: ReleaseStatusType$.inboundSchema.optional(),
            title: z.string(),
            value: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.href === undefined ? null : { href: v.href }),
                ...(v.release_status === undefined ? null : { releaseStatus: v.release_status }),
                title: v.title,
                value: v.value,
            };
        });

    export type Outbound = {
        href?: string | undefined;
        release_status?: string | undefined;
        title: string;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Option> = z
        .object({
            href: z.string().optional(),
            releaseStatus: ReleaseStatusType$.outboundSchema.optional(),
            title: z.string(),
            value: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.href === undefined ? null : { href: v.href }),
                ...(v.releaseStatus === undefined ? null : { release_status: v.releaseStatus }),
                title: v.title,
                value: v.value,
            };
        });
}
