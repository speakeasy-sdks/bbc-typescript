/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Embargoed, Embargoed$ } from "./embargoed";
import { Identifiers, Identifiers$ } from "./identifiers";
import { SourceAsset, SourceAsset$ } from "./sourceasset";
import { Synopses, Synopses$ } from "./synopses";
import * as z from "zod";

export type Image = {
    author?: string | undefined;
    embargoed: Embargoed;
    identifiers?: Identifiers | undefined;
    partner: string;
    pid: string;
    shootDate?: Date | undefined;
    sourceAsset?: SourceAsset | undefined;
    synopses?: Synopses | undefined;
    templateUrl?: string | undefined;
    title?: string | undefined;
    type?: string | undefined;
};

/** @internal */
export namespace Image$ {
    export const inboundSchema: z.ZodType<Image, z.ZodTypeDef, unknown> = z
        .object({
            author: z.string().optional(),
            embargoed: Embargoed$.inboundSchema,
            identifiers: Identifiers$.inboundSchema.optional(),
            partner: z.string(),
            pid: z.string(),
            shoot_date: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            source_asset: SourceAsset$.inboundSchema.optional(),
            synopses: Synopses$.inboundSchema.optional(),
            template_url: z.string().optional(),
            title: z.string().optional(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.author === undefined ? null : { author: v.author }),
                embargoed: v.embargoed,
                ...(v.identifiers === undefined ? null : { identifiers: v.identifiers }),
                partner: v.partner,
                pid: v.pid,
                ...(v.shoot_date === undefined ? null : { shootDate: v.shoot_date }),
                ...(v.source_asset === undefined ? null : { sourceAsset: v.source_asset }),
                ...(v.synopses === undefined ? null : { synopses: v.synopses }),
                ...(v.template_url === undefined ? null : { templateUrl: v.template_url }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        author?: string | undefined;
        embargoed: string;
        identifiers?: Identifiers$.Outbound | undefined;
        partner: string;
        pid: string;
        shoot_date?: string | undefined;
        source_asset?: SourceAsset$.Outbound | undefined;
        synopses?: Synopses$.Outbound | undefined;
        template_url?: string | undefined;
        title?: string | undefined;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Image> = z
        .object({
            author: z.string().optional(),
            embargoed: Embargoed$.outboundSchema,
            identifiers: Identifiers$.outboundSchema.optional(),
            partner: z.string(),
            pid: z.string(),
            shootDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            sourceAsset: SourceAsset$.outboundSchema.optional(),
            synopses: Synopses$.outboundSchema.optional(),
            templateUrl: z.string().optional(),
            title: z.string().optional(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.author === undefined ? null : { author: v.author }),
                embargoed: v.embargoed,
                ...(v.identifiers === undefined ? null : { identifiers: v.identifiers }),
                partner: v.partner,
                pid: v.pid,
                ...(v.shootDate === undefined ? null : { shoot_date: v.shootDate }),
                ...(v.sourceAsset === undefined ? null : { source_asset: v.sourceAsset }),
                ...(v.synopses === undefined ? null : { synopses: v.synopses }),
                ...(v.templateUrl === undefined ? null : { template_url: v.templateUrl }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
