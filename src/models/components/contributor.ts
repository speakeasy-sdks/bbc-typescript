/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ContributorName, ContributorName$ } from "./contributorname";
import { ContributorTo, ContributorTo$ } from "./contributorto";
import { Identifiers, Identifiers$ } from "./identifiers";
import { Ids, Ids$ } from "./ids";
import * as z from "zod";

export type Contributor = {
    contributorName?: ContributorName | undefined;
    contributorTo?: Array<ContributorTo> | undefined;
    disambiguation?: string | undefined;
    href?: string | undefined;
    identifiers?: Identifiers | undefined;
    ids?: Ids | undefined;
    partner: string;
    pid: string;
    type?: string | undefined;
};

/** @internal */
export namespace Contributor$ {
    export const inboundSchema: z.ZodType<Contributor, z.ZodTypeDef, unknown> = z
        .object({
            contributor_name: ContributorName$.inboundSchema.optional(),
            contributor_to: z.array(ContributorTo$.inboundSchema).optional(),
            disambiguation: z.string().optional(),
            href: z.string().optional(),
            identifiers: Identifiers$.inboundSchema.optional(),
            ids: Ids$.inboundSchema.optional(),
            partner: z.string(),
            pid: z.string(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.contributor_name === undefined
                    ? null
                    : { contributorName: v.contributor_name }),
                ...(v.contributor_to === undefined ? null : { contributorTo: v.contributor_to }),
                ...(v.disambiguation === undefined ? null : { disambiguation: v.disambiguation }),
                ...(v.href === undefined ? null : { href: v.href }),
                ...(v.identifiers === undefined ? null : { identifiers: v.identifiers }),
                ...(v.ids === undefined ? null : { ids: v.ids }),
                partner: v.partner,
                pid: v.pid,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        contributor_name?: ContributorName$.Outbound | undefined;
        contributor_to?: Array<ContributorTo$.Outbound> | undefined;
        disambiguation?: string | undefined;
        href?: string | undefined;
        identifiers?: Identifiers$.Outbound | undefined;
        ids?: Ids$.Outbound | undefined;
        partner: string;
        pid: string;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Contributor> = z
        .object({
            contributorName: ContributorName$.outboundSchema.optional(),
            contributorTo: z.array(ContributorTo$.outboundSchema).optional(),
            disambiguation: z.string().optional(),
            href: z.string().optional(),
            identifiers: Identifiers$.outboundSchema.optional(),
            ids: Ids$.outboundSchema.optional(),
            partner: z.string(),
            pid: z.string(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.contributorName === undefined
                    ? null
                    : { contributor_name: v.contributorName }),
                ...(v.contributorTo === undefined ? null : { contributor_to: v.contributorTo }),
                ...(v.disambiguation === undefined ? null : { disambiguation: v.disambiguation }),
                ...(v.href === undefined ? null : { href: v.href }),
                ...(v.identifiers === undefined ? null : { identifiers: v.identifiers }),
                ...(v.ids === undefined ? null : { ids: v.ids }),
                partner: v.partner,
                pid: v.pid,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
