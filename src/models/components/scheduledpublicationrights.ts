/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PublicationRights, PublicationRights$ } from "./publicationrights";
import * as z from "zod";

export type ScheduledPublicationRights = {
    publicationRights?: Array<PublicationRights> | undefined;
};

/** @internal */
export namespace ScheduledPublicationRights$ {
    export const inboundSchema: z.ZodType<ScheduledPublicationRights, z.ZodTypeDef, unknown> = z
        .object({
            publication_rights: z.array(PublicationRights$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.publication_rights === undefined
                    ? null
                    : { publicationRights: v.publication_rights }),
            };
        });

    export type Outbound = {
        publication_rights?: Array<PublicationRights$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ScheduledPublicationRights> = z
        .object({
            publicationRights: z.array(PublicationRights$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.publicationRights === undefined
                    ? null
                    : { publication_rights: v.publicationRights }),
            };
        });
}
