/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AvailableMixins, AvailableMixins$ } from "./availablemixins";
import { GuidanceWarnings, GuidanceWarnings$ } from "./guidancewarnings";
import * as z from "zod";

export type AvailableVersionsElementTypes = {
    type?: Array<string> | undefined;
};

export type AvailableVersionsElementVersionTypes = {
    type?: Array<string> | undefined;
};

export type AvailableVersionsElementVersionVersion = {
    availableMixins?: AvailableMixins | undefined;
    competitionWarning?: boolean | undefined;
    duration?: string | undefined;
    guidanceWarnings?: GuidanceWarnings | undefined;
    pid?: string | undefined;
    types: Array<AvailableVersionsElementVersionTypes>;
};

export type AvailableVersionsElementVersion = {
    availableMixins?: AvailableMixins | undefined;
    competitionWarning?: boolean | undefined;
    duration?: string | undefined;
    guidanceWarnings?: GuidanceWarnings | undefined;
    pid?: string | undefined;
    types: Array<AvailableVersionsElementTypes>;
    version?: Array<AvailableVersionsElementVersionVersion> | undefined;
};

export type AvailableVersionsElement = {
    version?: Array<AvailableVersionsElementVersion> | undefined;
};

/** @internal */
export namespace AvailableVersionsElementTypes$ {
    export const inboundSchema: z.ZodType<AvailableVersionsElementTypes, z.ZodTypeDef, unknown> = z
        .object({
            type: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        type?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AvailableVersionsElementTypes> =
        z
            .object({
                type: z.array(z.string()).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.type === undefined ? null : { type: v.type }),
                };
            });
}

/** @internal */
export namespace AvailableVersionsElementVersionTypes$ {
    export const inboundSchema: z.ZodType<
        AvailableVersionsElementVersionTypes,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        type?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AvailableVersionsElementVersionTypes
    > = z
        .object({
            type: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace AvailableVersionsElementVersionVersion$ {
    export const inboundSchema: z.ZodType<
        AvailableVersionsElementVersionVersion,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            available_mixins: AvailableMixins$.inboundSchema.optional(),
            competition_warning: z.boolean().optional(),
            duration: z.string().optional(),
            guidance_warnings: GuidanceWarnings$.inboundSchema.optional(),
            pid: z.string().optional(),
            types: z.array(z.lazy(() => AvailableVersionsElementVersionTypes$.inboundSchema)),
        })
        .transform((v) => {
            return {
                ...(v.available_mixins === undefined
                    ? null
                    : { availableMixins: v.available_mixins }),
                ...(v.competition_warning === undefined
                    ? null
                    : { competitionWarning: v.competition_warning }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.guidance_warnings === undefined
                    ? null
                    : { guidanceWarnings: v.guidance_warnings }),
                ...(v.pid === undefined ? null : { pid: v.pid }),
                types: v.types,
            };
        });

    export type Outbound = {
        available_mixins?: AvailableMixins$.Outbound | undefined;
        competition_warning?: boolean | undefined;
        duration?: string | undefined;
        guidance_warnings?: GuidanceWarnings$.Outbound | undefined;
        pid?: string | undefined;
        types: Array<AvailableVersionsElementVersionTypes$.Outbound>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AvailableVersionsElementVersionVersion
    > = z
        .object({
            availableMixins: AvailableMixins$.outboundSchema.optional(),
            competitionWarning: z.boolean().optional(),
            duration: z.string().optional(),
            guidanceWarnings: GuidanceWarnings$.outboundSchema.optional(),
            pid: z.string().optional(),
            types: z.array(z.lazy(() => AvailableVersionsElementVersionTypes$.outboundSchema)),
        })
        .transform((v) => {
            return {
                ...(v.availableMixins === undefined
                    ? null
                    : { available_mixins: v.availableMixins }),
                ...(v.competitionWarning === undefined
                    ? null
                    : { competition_warning: v.competitionWarning }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.guidanceWarnings === undefined
                    ? null
                    : { guidance_warnings: v.guidanceWarnings }),
                ...(v.pid === undefined ? null : { pid: v.pid }),
                types: v.types,
            };
        });
}

/** @internal */
export namespace AvailableVersionsElementVersion$ {
    export const inboundSchema: z.ZodType<AvailableVersionsElementVersion, z.ZodTypeDef, unknown> =
        z
            .object({
                available_mixins: AvailableMixins$.inboundSchema.optional(),
                competition_warning: z.boolean().optional(),
                duration: z.string().optional(),
                guidance_warnings: GuidanceWarnings$.inboundSchema.optional(),
                pid: z.string().optional(),
                types: z.array(z.lazy(() => AvailableVersionsElementTypes$.inboundSchema)),
                version: z
                    .array(z.lazy(() => AvailableVersionsElementVersionVersion$.inboundSchema))
                    .optional(),
            })
            .transform((v) => {
                return {
                    ...(v.available_mixins === undefined
                        ? null
                        : { availableMixins: v.available_mixins }),
                    ...(v.competition_warning === undefined
                        ? null
                        : { competitionWarning: v.competition_warning }),
                    ...(v.duration === undefined ? null : { duration: v.duration }),
                    ...(v.guidance_warnings === undefined
                        ? null
                        : { guidanceWarnings: v.guidance_warnings }),
                    ...(v.pid === undefined ? null : { pid: v.pid }),
                    types: v.types,
                    ...(v.version === undefined ? null : { version: v.version }),
                };
            });

    export type Outbound = {
        available_mixins?: AvailableMixins$.Outbound | undefined;
        competition_warning?: boolean | undefined;
        duration?: string | undefined;
        guidance_warnings?: GuidanceWarnings$.Outbound | undefined;
        pid?: string | undefined;
        types: Array<AvailableVersionsElementTypes$.Outbound>;
        version?: Array<AvailableVersionsElementVersionVersion$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AvailableVersionsElementVersion
    > = z
        .object({
            availableMixins: AvailableMixins$.outboundSchema.optional(),
            competitionWarning: z.boolean().optional(),
            duration: z.string().optional(),
            guidanceWarnings: GuidanceWarnings$.outboundSchema.optional(),
            pid: z.string().optional(),
            types: z.array(z.lazy(() => AvailableVersionsElementTypes$.outboundSchema)),
            version: z
                .array(z.lazy(() => AvailableVersionsElementVersionVersion$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.availableMixins === undefined
                    ? null
                    : { available_mixins: v.availableMixins }),
                ...(v.competitionWarning === undefined
                    ? null
                    : { competition_warning: v.competitionWarning }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.guidanceWarnings === undefined
                    ? null
                    : { guidance_warnings: v.guidanceWarnings }),
                ...(v.pid === undefined ? null : { pid: v.pid }),
                types: v.types,
                ...(v.version === undefined ? null : { version: v.version }),
            };
        });
}

/** @internal */
export namespace AvailableVersionsElement$ {
    export const inboundSchema: z.ZodType<AvailableVersionsElement, z.ZodTypeDef, unknown> = z
        .object({
            version: z
                .array(z.lazy(() => AvailableVersionsElementVersion$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.version === undefined ? null : { version: v.version }),
            };
        });

    export type Outbound = {
        version?: Array<AvailableVersionsElementVersion$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AvailableVersionsElement> = z
        .object({
            version: z
                .array(z.lazy(() => AvailableVersionsElementVersion$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.version === undefined ? null : { version: v.version }),
            };
        });
}
