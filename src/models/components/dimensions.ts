/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Dimensions = {
    height?: number | undefined;
    width?: number | undefined;
};

/** @internal */
export namespace Dimensions$ {
    export const inboundSchema: z.ZodType<Dimensions, z.ZodTypeDef, unknown> = z
        .object({
            height: z.number().int().optional(),
            width: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.width === undefined ? null : { width: v.width }),
            };
        });

    export type Outbound = {
        height?: number | undefined;
        width?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Dimensions> = z
        .object({
            height: z.number().int().optional(),
            width: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.width === undefined ? null : { width: v.width }),
            };
        });
}
