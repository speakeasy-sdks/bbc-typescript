/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Identifiers, Identifiers$ } from "./identifiers";
import { ImageLink, ImageLink$ } from "./imagelink";
import { ImagesMixin, ImagesMixin$ } from "./imagesmixin";
import * as z from "zod";

export type CompetitionWarning = {
    href: string;
    pid: string;
};

export type MasterBrandDateRange = {
    end?: Date | undefined;
    start?: Date | undefined;
};

export type MasterBrandSynopses = {
    long?: string | undefined;
    medium?: string | undefined;
    short?: string | undefined;
};

export type MasterBrand = {
    colour?: string | undefined;
    competitionWarning?: CompetitionWarning | undefined;
    ident?: string | undefined;
    identifiers?: Identifiers | undefined;
    imageLink?: ImageLink | undefined;
    imagesMixin?: ImagesMixin | undefined;
    masterBrandDateRange?: MasterBrandDateRange | undefined;
    mid: string;
    name?: string | undefined;
    partner: string;
    position?: number | undefined;
    synopses?: MasterBrandSynopses | undefined;
    title?: string | undefined;
    urlKey?: string | undefined;
};

/** @internal */
export namespace CompetitionWarning$ {
    export const inboundSchema: z.ZodType<CompetitionWarning, z.ZodTypeDef, unknown> = z
        .object({
            href: z.string(),
            pid: z.string(),
        })
        .transform((v) => {
            return {
                href: v.href,
                pid: v.pid,
            };
        });

    export type Outbound = {
        href: string;
        pid: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CompetitionWarning> = z
        .object({
            href: z.string(),
            pid: z.string(),
        })
        .transform((v) => {
            return {
                href: v.href,
                pid: v.pid,
            };
        });
}

/** @internal */
export namespace MasterBrandDateRange$ {
    export const inboundSchema: z.ZodType<MasterBrandDateRange, z.ZodTypeDef, unknown> = z
        .object({
            end: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            start: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.end === undefined ? null : { end: v.end }),
                ...(v.start === undefined ? null : { start: v.start }),
            };
        });

    export type Outbound = {
        end?: string | undefined;
        start?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MasterBrandDateRange> = z
        .object({
            end: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            start: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.end === undefined ? null : { end: v.end }),
                ...(v.start === undefined ? null : { start: v.start }),
            };
        });
}

/** @internal */
export namespace MasterBrandSynopses$ {
    export const inboundSchema: z.ZodType<MasterBrandSynopses, z.ZodTypeDef, unknown> = z
        .object({
            long: z.string().optional(),
            medium: z.string().optional(),
            short: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.long === undefined ? null : { long: v.long }),
                ...(v.medium === undefined ? null : { medium: v.medium }),
                ...(v.short === undefined ? null : { short: v.short }),
            };
        });

    export type Outbound = {
        long?: string | undefined;
        medium?: string | undefined;
        short?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MasterBrandSynopses> = z
        .object({
            long: z.string().optional(),
            medium: z.string().optional(),
            short: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.long === undefined ? null : { long: v.long }),
                ...(v.medium === undefined ? null : { medium: v.medium }),
                ...(v.short === undefined ? null : { short: v.short }),
            };
        });
}

/** @internal */
export namespace MasterBrand$ {
    export const inboundSchema: z.ZodType<MasterBrand, z.ZodTypeDef, unknown> = z
        .object({
            colour: z.string().optional(),
            competition_warning: z.lazy(() => CompetitionWarning$.inboundSchema).optional(),
            ident: z.string().optional(),
            identifiers: Identifiers$.inboundSchema.optional(),
            image_link: ImageLink$.inboundSchema.optional(),
            images_mixin: ImagesMixin$.inboundSchema.optional(),
            master_brand_date_range: z.lazy(() => MasterBrandDateRange$.inboundSchema).optional(),
            mid: z.string(),
            name: z.string().optional(),
            partner: z.string(),
            position: z.number().int().optional(),
            synopses: z.lazy(() => MasterBrandSynopses$.inboundSchema).optional(),
            title: z.string().optional(),
            url_key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.colour === undefined ? null : { colour: v.colour }),
                ...(v.competition_warning === undefined
                    ? null
                    : { competitionWarning: v.competition_warning }),
                ...(v.ident === undefined ? null : { ident: v.ident }),
                ...(v.identifiers === undefined ? null : { identifiers: v.identifiers }),
                ...(v.image_link === undefined ? null : { imageLink: v.image_link }),
                ...(v.images_mixin === undefined ? null : { imagesMixin: v.images_mixin }),
                ...(v.master_brand_date_range === undefined
                    ? null
                    : { masterBrandDateRange: v.master_brand_date_range }),
                mid: v.mid,
                ...(v.name === undefined ? null : { name: v.name }),
                partner: v.partner,
                ...(v.position === undefined ? null : { position: v.position }),
                ...(v.synopses === undefined ? null : { synopses: v.synopses }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.url_key === undefined ? null : { urlKey: v.url_key }),
            };
        });

    export type Outbound = {
        colour?: string | undefined;
        competition_warning?: CompetitionWarning$.Outbound | undefined;
        ident?: string | undefined;
        identifiers?: Identifiers$.Outbound | undefined;
        image_link?: ImageLink$.Outbound | undefined;
        images_mixin?: ImagesMixin$.Outbound | undefined;
        master_brand_date_range?: MasterBrandDateRange$.Outbound | undefined;
        mid: string;
        name?: string | undefined;
        partner: string;
        position?: number | undefined;
        synopses?: MasterBrandSynopses$.Outbound | undefined;
        title?: string | undefined;
        url_key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MasterBrand> = z
        .object({
            colour: z.string().optional(),
            competitionWarning: z.lazy(() => CompetitionWarning$.outboundSchema).optional(),
            ident: z.string().optional(),
            identifiers: Identifiers$.outboundSchema.optional(),
            imageLink: ImageLink$.outboundSchema.optional(),
            imagesMixin: ImagesMixin$.outboundSchema.optional(),
            masterBrandDateRange: z.lazy(() => MasterBrandDateRange$.outboundSchema).optional(),
            mid: z.string(),
            name: z.string().optional(),
            partner: z.string(),
            position: z.number().int().optional(),
            synopses: z.lazy(() => MasterBrandSynopses$.outboundSchema).optional(),
            title: z.string().optional(),
            urlKey: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.colour === undefined ? null : { colour: v.colour }),
                ...(v.competitionWarning === undefined
                    ? null
                    : { competition_warning: v.competitionWarning }),
                ...(v.ident === undefined ? null : { ident: v.ident }),
                ...(v.identifiers === undefined ? null : { identifiers: v.identifiers }),
                ...(v.imageLink === undefined ? null : { image_link: v.imageLink }),
                ...(v.imagesMixin === undefined ? null : { images_mixin: v.imagesMixin }),
                ...(v.masterBrandDateRange === undefined
                    ? null
                    : { master_brand_date_range: v.masterBrandDateRange }),
                mid: v.mid,
                ...(v.name === undefined ? null : { name: v.name }),
                partner: v.partner,
                ...(v.position === undefined ? null : { position: v.position }),
                ...(v.synopses === undefined ? null : { synopses: v.synopses }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.urlKey === undefined ? null : { url_key: v.urlKey }),
            };
        });
}
