/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type AncestorsTitlesBrand = {
    pid: string;
    title?: string | undefined;
};

export type AncestorsTitlesEpisodeBrand = {
    pid: string;
    title?: string | undefined;
};

export type AncestorsTitlesEpisodeEpisode = {
    containersTitle?: string | undefined;
    pid: string;
    presentationTitle?: string | undefined;
    title?: string | undefined;
};

export type AncestorsTitlesEpisodeSeries = {
    pid: string;
    title?: string | undefined;
};

export type AncestorsTitlesEpisode = {
    brand?: AncestorsTitlesEpisodeBrand | undefined;
    containersTitle?: string | undefined;
    episode?: AncestorsTitlesEpisodeEpisode | undefined;
    pid: string;
    presentationTitle?: string | undefined;
    series?: Array<AncestorsTitlesEpisodeSeries> | undefined;
    title?: string | undefined;
};

export type AncestorsTitlesSeries = {
    pid: string;
    title?: string | undefined;
};

export type AncestorsTitles = {
    brand?: AncestorsTitlesBrand | undefined;
    episode?: AncestorsTitlesEpisode | undefined;
    series?: Array<AncestorsTitlesSeries> | undefined;
};

/** @internal */
export namespace AncestorsTitlesBrand$ {
    export const inboundSchema: z.ZodType<AncestorsTitlesBrand, z.ZodTypeDef, unknown> = z
        .object({
            pid: z.string(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                pid: v.pid,
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });

    export type Outbound = {
        pid: string;
        title?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AncestorsTitlesBrand> = z
        .object({
            pid: z.string(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                pid: v.pid,
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });
}

/** @internal */
export namespace AncestorsTitlesEpisodeBrand$ {
    export const inboundSchema: z.ZodType<AncestorsTitlesEpisodeBrand, z.ZodTypeDef, unknown> = z
        .object({
            pid: z.string(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                pid: v.pid,
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });

    export type Outbound = {
        pid: string;
        title?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AncestorsTitlesEpisodeBrand> = z
        .object({
            pid: z.string(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                pid: v.pid,
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });
}

/** @internal */
export namespace AncestorsTitlesEpisodeEpisode$ {
    export const inboundSchema: z.ZodType<AncestorsTitlesEpisodeEpisode, z.ZodTypeDef, unknown> = z
        .object({
            containers_title: z.string().optional(),
            pid: z.string(),
            presentation_title: z.string().optional(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.containers_title === undefined
                    ? null
                    : { containersTitle: v.containers_title }),
                pid: v.pid,
                ...(v.presentation_title === undefined
                    ? null
                    : { presentationTitle: v.presentation_title }),
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });

    export type Outbound = {
        containers_title?: string | undefined;
        pid: string;
        presentation_title?: string | undefined;
        title?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AncestorsTitlesEpisodeEpisode> =
        z
            .object({
                containersTitle: z.string().optional(),
                pid: z.string(),
                presentationTitle: z.string().optional(),
                title: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.containersTitle === undefined
                        ? null
                        : { containers_title: v.containersTitle }),
                    pid: v.pid,
                    ...(v.presentationTitle === undefined
                        ? null
                        : { presentation_title: v.presentationTitle }),
                    ...(v.title === undefined ? null : { title: v.title }),
                };
            });
}

/** @internal */
export namespace AncestorsTitlesEpisodeSeries$ {
    export const inboundSchema: z.ZodType<AncestorsTitlesEpisodeSeries, z.ZodTypeDef, unknown> = z
        .object({
            pid: z.string(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                pid: v.pid,
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });

    export type Outbound = {
        pid: string;
        title?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AncestorsTitlesEpisodeSeries> = z
        .object({
            pid: z.string(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                pid: v.pid,
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });
}

/** @internal */
export namespace AncestorsTitlesEpisode$ {
    export const inboundSchema: z.ZodType<AncestorsTitlesEpisode, z.ZodTypeDef, unknown> = z
        .object({
            brand: z.lazy(() => AncestorsTitlesEpisodeBrand$.inboundSchema).optional(),
            containers_title: z.string().optional(),
            episode: z.lazy(() => AncestorsTitlesEpisodeEpisode$.inboundSchema).optional(),
            pid: z.string(),
            presentation_title: z.string().optional(),
            series: z.array(z.lazy(() => AncestorsTitlesEpisodeSeries$.inboundSchema)).optional(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.brand === undefined ? null : { brand: v.brand }),
                ...(v.containers_title === undefined
                    ? null
                    : { containersTitle: v.containers_title }),
                ...(v.episode === undefined ? null : { episode: v.episode }),
                pid: v.pid,
                ...(v.presentation_title === undefined
                    ? null
                    : { presentationTitle: v.presentation_title }),
                ...(v.series === undefined ? null : { series: v.series }),
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });

    export type Outbound = {
        brand?: AncestorsTitlesEpisodeBrand$.Outbound | undefined;
        containers_title?: string | undefined;
        episode?: AncestorsTitlesEpisodeEpisode$.Outbound | undefined;
        pid: string;
        presentation_title?: string | undefined;
        series?: Array<AncestorsTitlesEpisodeSeries$.Outbound> | undefined;
        title?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AncestorsTitlesEpisode> = z
        .object({
            brand: z.lazy(() => AncestorsTitlesEpisodeBrand$.outboundSchema).optional(),
            containersTitle: z.string().optional(),
            episode: z.lazy(() => AncestorsTitlesEpisodeEpisode$.outboundSchema).optional(),
            pid: z.string(),
            presentationTitle: z.string().optional(),
            series: z.array(z.lazy(() => AncestorsTitlesEpisodeSeries$.outboundSchema)).optional(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.brand === undefined ? null : { brand: v.brand }),
                ...(v.containersTitle === undefined
                    ? null
                    : { containers_title: v.containersTitle }),
                ...(v.episode === undefined ? null : { episode: v.episode }),
                pid: v.pid,
                ...(v.presentationTitle === undefined
                    ? null
                    : { presentation_title: v.presentationTitle }),
                ...(v.series === undefined ? null : { series: v.series }),
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });
}

/** @internal */
export namespace AncestorsTitlesSeries$ {
    export const inboundSchema: z.ZodType<AncestorsTitlesSeries, z.ZodTypeDef, unknown> = z
        .object({
            pid: z.string(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                pid: v.pid,
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });

    export type Outbound = {
        pid: string;
        title?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AncestorsTitlesSeries> = z
        .object({
            pid: z.string(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                pid: v.pid,
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });
}

/** @internal */
export namespace AncestorsTitles$ {
    export const inboundSchema: z.ZodType<AncestorsTitles, z.ZodTypeDef, unknown> = z
        .object({
            brand: z.lazy(() => AncestorsTitlesBrand$.inboundSchema).optional(),
            episode: z.lazy(() => AncestorsTitlesEpisode$.inboundSchema).optional(),
            series: z.array(z.lazy(() => AncestorsTitlesSeries$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.brand === undefined ? null : { brand: v.brand }),
                ...(v.episode === undefined ? null : { episode: v.episode }),
                ...(v.series === undefined ? null : { series: v.series }),
            };
        });

    export type Outbound = {
        brand?: AncestorsTitlesBrand$.Outbound | undefined;
        episode?: AncestorsTitlesEpisode$.Outbound | undefined;
        series?: Array<AncestorsTitlesSeries$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AncestorsTitles> = z
        .object({
            brand: z.lazy(() => AncestorsTitlesBrand$.outboundSchema).optional(),
            episode: z.lazy(() => AncestorsTitlesEpisode$.outboundSchema).optional(),
            series: z.array(z.lazy(() => AncestorsTitlesSeries$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.brand === undefined ? null : { brand: v.brand }),
                ...(v.episode === undefined ? null : { episode: v.episode }),
                ...(v.series === undefined ? null : { series: v.series }),
            };
        });
}
