/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Filter, Filter$ } from "./filter";
import { UnstableFilters, UnstableFilters$ } from "./unstablefilters";
import * as z from "zod";

export type Filters = {
    filter?: Array<Filter> | undefined;
    unstableFilters?: UnstableFilters | undefined;
};

/** @internal */
export namespace Filters$ {
    export const inboundSchema: z.ZodType<Filters, z.ZodTypeDef, unknown> = z
        .object({
            filter: z.array(Filter$.inboundSchema).optional(),
            unstable_filters: UnstableFilters$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.filter === undefined ? null : { filter: v.filter }),
                ...(v.unstable_filters === undefined
                    ? null
                    : { unstableFilters: v.unstable_filters }),
            };
        });

    export type Outbound = {
        filter?: Array<Filter$.Outbound> | undefined;
        unstable_filters?: UnstableFilters$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Filters> = z
        .object({
            filter: z.array(Filter$.outboundSchema).optional(),
            unstableFilters: UnstableFilters$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.filter === undefined ? null : { filter: v.filter }),
                ...(v.unstableFilters === undefined
                    ? null
                    : { unstable_filters: v.unstableFilters }),
            };
        });
}
