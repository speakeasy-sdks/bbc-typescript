/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DeprecationAttributes, DeprecationAttributes$ } from "./deprecationattributes";
import * as z from "zod";

export type ImageImage = {
    pid?: string | undefined;
    templateUrl: string;
};

export type Two = {
    image: ImageImage;
    pid?: string | undefined;
    templateUrl: string;
};

export type ImageLinkImage = DeprecationAttributes | Two;

export type ImageLink = {
    image: DeprecationAttributes | Two;
};

/** @internal */
export namespace ImageImage$ {
    export const inboundSchema: z.ZodType<ImageImage, z.ZodTypeDef, unknown> = z
        .object({
            pid: z.string().optional(),
            template_url: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.pid === undefined ? null : { pid: v.pid }),
                templateUrl: v.template_url,
            };
        });

    export type Outbound = {
        pid?: string | undefined;
        template_url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ImageImage> = z
        .object({
            pid: z.string().optional(),
            templateUrl: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.pid === undefined ? null : { pid: v.pid }),
                template_url: v.templateUrl,
            };
        });
}

/** @internal */
export namespace Two$ {
    export const inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z
        .object({
            image: z.lazy(() => ImageImage$.inboundSchema),
            pid: z.string().optional(),
            template_url: z.string(),
        })
        .transform((v) => {
            return {
                image: v.image,
                ...(v.pid === undefined ? null : { pid: v.pid }),
                templateUrl: v.template_url,
            };
        });

    export type Outbound = {
        image: ImageImage$.Outbound;
        pid?: string | undefined;
        template_url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Two> = z
        .object({
            image: z.lazy(() => ImageImage$.outboundSchema),
            pid: z.string().optional(),
            templateUrl: z.string(),
        })
        .transform((v) => {
            return {
                image: v.image,
                ...(v.pid === undefined ? null : { pid: v.pid }),
                template_url: v.templateUrl,
            };
        });
}

/** @internal */
export namespace ImageLinkImage$ {
    export const inboundSchema: z.ZodType<ImageLinkImage, z.ZodTypeDef, unknown> = z.union([
        DeprecationAttributes$.inboundSchema,
        z.lazy(() => Two$.inboundSchema),
    ]);

    export type Outbound = DeprecationAttributes$.Outbound | Two$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ImageLinkImage> = z.union([
        DeprecationAttributes$.outboundSchema,
        z.lazy(() => Two$.outboundSchema),
    ]);
}

/** @internal */
export namespace ImageLink$ {
    export const inboundSchema: z.ZodType<ImageLink, z.ZodTypeDef, unknown> = z
        .object({
            image: z.union([
                DeprecationAttributes$.inboundSchema,
                z.lazy(() => Two$.inboundSchema),
            ]),
        })
        .transform((v) => {
            return {
                image: v.image,
            };
        });

    export type Outbound = {
        image: DeprecationAttributes$.Outbound | Two$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ImageLink> = z
        .object({
            image: z.union([
                DeprecationAttributes$.outboundSchema,
                z.lazy(() => Two$.outboundSchema),
            ]),
        })
        .transform((v) => {
            return {
                image: v.image,
            };
        });
}
