/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AncestorsTitles, AncestorsTitles$ } from "./ancestorstitles";
import { AncestorTitles, AncestorTitles$ } from "./ancestortitles";
import { BroadcastOf, BroadcastOf$ } from "./broadcastof";
import { Identifiers, Identifiers$ } from "./identifiers";
import { Ids, Ids$ } from "./ids";
import { ImageLink, ImageLink$ } from "./imagelink";
import { ImagesMixin, ImagesMixin$ } from "./imagesmixin";
import { PublishedTime, PublishedTime$ } from "./publishedtime";
import { ServiceReference, ServiceReference$ } from "./servicereference";
import { TxTime, TxTime$ } from "./txtime";
import * as z from "zod";

export type Broadcast = {
    ancestorTitles?: AncestorTitles | undefined;
    ancestorsTitles?: AncestorsTitles | undefined;
    broadcastOf?: Array<BroadcastOf> | undefined;
    identifiers?: Identifiers | undefined;
    ids?: Ids | undefined;
    imageLink?: ImageLink | undefined;
    imagesMixin?: ImagesMixin | undefined;
    isAudioDescribed?: boolean | undefined;
    isBlanked?: boolean | undefined;
    isCritical?: boolean | undefined;
    isRepeat?: boolean | undefined;
    isSimulcast?: boolean | undefined;
    partner: string;
    pid: string;
    publishedTime?: PublishedTime | undefined;
    service?: ServiceReference | undefined;
    txTime?: TxTime | undefined;
    updatedTime?: Date | undefined;
};

/** @internal */
export namespace Broadcast$ {
    export const inboundSchema: z.ZodType<Broadcast, z.ZodTypeDef, unknown> = z
        .object({
            ancestor_titles: AncestorTitles$.inboundSchema.optional(),
            ancestors_titles: AncestorsTitles$.inboundSchema.optional(),
            broadcast_of: z.array(BroadcastOf$.inboundSchema).optional(),
            identifiers: Identifiers$.inboundSchema.optional(),
            ids: Ids$.inboundSchema.optional(),
            image_link: ImageLink$.inboundSchema.optional(),
            images_mixin: ImagesMixin$.inboundSchema.optional(),
            is_audio_described: z.boolean().optional(),
            is_blanked: z.boolean().optional(),
            is_critical: z.boolean().optional(),
            is_repeat: z.boolean().optional(),
            is_simulcast: z.boolean().optional(),
            partner: z.string(),
            pid: z.string(),
            published_time: PublishedTime$.inboundSchema.optional(),
            service: ServiceReference$.inboundSchema.optional(),
            tx_time: TxTime$.inboundSchema.optional(),
            updated_time: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.ancestor_titles === undefined ? null : { ancestorTitles: v.ancestor_titles }),
                ...(v.ancestors_titles === undefined
                    ? null
                    : { ancestorsTitles: v.ancestors_titles }),
                ...(v.broadcast_of === undefined ? null : { broadcastOf: v.broadcast_of }),
                ...(v.identifiers === undefined ? null : { identifiers: v.identifiers }),
                ...(v.ids === undefined ? null : { ids: v.ids }),
                ...(v.image_link === undefined ? null : { imageLink: v.image_link }),
                ...(v.images_mixin === undefined ? null : { imagesMixin: v.images_mixin }),
                ...(v.is_audio_described === undefined
                    ? null
                    : { isAudioDescribed: v.is_audio_described }),
                ...(v.is_blanked === undefined ? null : { isBlanked: v.is_blanked }),
                ...(v.is_critical === undefined ? null : { isCritical: v.is_critical }),
                ...(v.is_repeat === undefined ? null : { isRepeat: v.is_repeat }),
                ...(v.is_simulcast === undefined ? null : { isSimulcast: v.is_simulcast }),
                partner: v.partner,
                pid: v.pid,
                ...(v.published_time === undefined ? null : { publishedTime: v.published_time }),
                ...(v.service === undefined ? null : { service: v.service }),
                ...(v.tx_time === undefined ? null : { txTime: v.tx_time }),
                ...(v.updated_time === undefined ? null : { updatedTime: v.updated_time }),
            };
        });

    export type Outbound = {
        ancestor_titles?: AncestorTitles$.Outbound | undefined;
        ancestors_titles?: AncestorsTitles$.Outbound | undefined;
        broadcast_of?: Array<BroadcastOf$.Outbound> | undefined;
        identifiers?: Identifiers$.Outbound | undefined;
        ids?: Ids$.Outbound | undefined;
        image_link?: ImageLink$.Outbound | undefined;
        images_mixin?: ImagesMixin$.Outbound | undefined;
        is_audio_described?: boolean | undefined;
        is_blanked?: boolean | undefined;
        is_critical?: boolean | undefined;
        is_repeat?: boolean | undefined;
        is_simulcast?: boolean | undefined;
        partner: string;
        pid: string;
        published_time?: PublishedTime$.Outbound | undefined;
        service?: ServiceReference$.Outbound | undefined;
        tx_time?: TxTime$.Outbound | undefined;
        updated_time?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Broadcast> = z
        .object({
            ancestorTitles: AncestorTitles$.outboundSchema.optional(),
            ancestorsTitles: AncestorsTitles$.outboundSchema.optional(),
            broadcastOf: z.array(BroadcastOf$.outboundSchema).optional(),
            identifiers: Identifiers$.outboundSchema.optional(),
            ids: Ids$.outboundSchema.optional(),
            imageLink: ImageLink$.outboundSchema.optional(),
            imagesMixin: ImagesMixin$.outboundSchema.optional(),
            isAudioDescribed: z.boolean().optional(),
            isBlanked: z.boolean().optional(),
            isCritical: z.boolean().optional(),
            isRepeat: z.boolean().optional(),
            isSimulcast: z.boolean().optional(),
            partner: z.string(),
            pid: z.string(),
            publishedTime: PublishedTime$.outboundSchema.optional(),
            service: ServiceReference$.outboundSchema.optional(),
            txTime: TxTime$.outboundSchema.optional(),
            updatedTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.ancestorTitles === undefined ? null : { ancestor_titles: v.ancestorTitles }),
                ...(v.ancestorsTitles === undefined
                    ? null
                    : { ancestors_titles: v.ancestorsTitles }),
                ...(v.broadcastOf === undefined ? null : { broadcast_of: v.broadcastOf }),
                ...(v.identifiers === undefined ? null : { identifiers: v.identifiers }),
                ...(v.ids === undefined ? null : { ids: v.ids }),
                ...(v.imageLink === undefined ? null : { image_link: v.imageLink }),
                ...(v.imagesMixin === undefined ? null : { images_mixin: v.imagesMixin }),
                ...(v.isAudioDescribed === undefined
                    ? null
                    : { is_audio_described: v.isAudioDescribed }),
                ...(v.isBlanked === undefined ? null : { is_blanked: v.isBlanked }),
                ...(v.isCritical === undefined ? null : { is_critical: v.isCritical }),
                ...(v.isRepeat === undefined ? null : { is_repeat: v.isRepeat }),
                ...(v.isSimulcast === undefined ? null : { is_simulcast: v.isSimulcast }),
                partner: v.partner,
                pid: v.pid,
                ...(v.publishedTime === undefined ? null : { published_time: v.publishedTime }),
                ...(v.service === undefined ? null : { service: v.service }),
                ...(v.txTime === undefined ? null : { tx_time: v.txTime }),
                ...(v.updatedTime === undefined ? null : { updated_time: v.updatedTime }),
            };
        });
}
