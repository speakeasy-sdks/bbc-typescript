/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { OffsetIn, OffsetIn$ } from "./offsetin";
import * as z from "zod";

export type Offsets = {
    offsetIn?: Array<OffsetIn> | undefined;
};

/** @internal */
export namespace Offsets$ {
    export const inboundSchema: z.ZodType<Offsets, z.ZodTypeDef, unknown> = z
        .object({
            offset_in: z.array(OffsetIn$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.offset_in === undefined ? null : { offsetIn: v.offset_in }),
            };
        });

    export type Outbound = {
        offset_in?: Array<OffsetIn$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Offsets> = z
        .object({
            offsetIn: z.array(OffsetIn$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.offsetIn === undefined ? null : { offset_in: v.offsetIn }),
            };
        });
}
