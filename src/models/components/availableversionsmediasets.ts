/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type AvailableVersionsMediaSetsTerritories = {
    territory?: Array<string> | undefined;
};

export type AvailableVersionsMediaSetsMediaSet = {
    actualStart?: Date | undefined;
    name: string;
    territories?: AvailableVersionsMediaSetsTerritories | undefined;
};

export type AvailableVersionsMediaSetsMediaSets = {
    mediaSet: Array<AvailableVersionsMediaSetsMediaSet>;
};

export type Territories = {
    mediaSets?: AvailableVersionsMediaSetsMediaSets | undefined;
    territory?: Array<string> | undefined;
};

export type MediaSet = {
    actualStart?: Date | undefined;
    name: string;
    territories?: Territories | undefined;
};

export type MediaSets = {
    mediaSet: Array<MediaSet>;
};

export type AvailableVersionsMediaSets = {
    mediaSets?: MediaSets | undefined;
};

/** @internal */
export namespace AvailableVersionsMediaSetsTerritories$ {
    export const inboundSchema: z.ZodType<
        AvailableVersionsMediaSetsTerritories,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            territory: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.territory === undefined ? null : { territory: v.territory }),
            };
        });

    export type Outbound = {
        territory?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AvailableVersionsMediaSetsTerritories
    > = z
        .object({
            territory: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.territory === undefined ? null : { territory: v.territory }),
            };
        });
}

/** @internal */
export namespace AvailableVersionsMediaSetsMediaSet$ {
    export const inboundSchema: z.ZodType<
        AvailableVersionsMediaSetsMediaSet,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            actual_start: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            name: z.string(),
            territories: z
                .lazy(() => AvailableVersionsMediaSetsTerritories$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.actual_start === undefined ? null : { actualStart: v.actual_start }),
                name: v.name,
                ...(v.territories === undefined ? null : { territories: v.territories }),
            };
        });

    export type Outbound = {
        actual_start?: string | undefined;
        name: string;
        territories?: AvailableVersionsMediaSetsTerritories$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AvailableVersionsMediaSetsMediaSet
    > = z
        .object({
            actualStart: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            name: z.string(),
            territories: z
                .lazy(() => AvailableVersionsMediaSetsTerritories$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.actualStart === undefined ? null : { actual_start: v.actualStart }),
                name: v.name,
                ...(v.territories === undefined ? null : { territories: v.territories }),
            };
        });
}

/** @internal */
export namespace AvailableVersionsMediaSetsMediaSets$ {
    export const inboundSchema: z.ZodType<
        AvailableVersionsMediaSetsMediaSets,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            media_set: z.array(z.lazy(() => AvailableVersionsMediaSetsMediaSet$.inboundSchema)),
        })
        .transform((v) => {
            return {
                mediaSet: v.media_set,
            };
        });

    export type Outbound = {
        media_set: Array<AvailableVersionsMediaSetsMediaSet$.Outbound>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AvailableVersionsMediaSetsMediaSets
    > = z
        .object({
            mediaSet: z.array(z.lazy(() => AvailableVersionsMediaSetsMediaSet$.outboundSchema)),
        })
        .transform((v) => {
            return {
                media_set: v.mediaSet,
            };
        });
}

/** @internal */
export namespace Territories$ {
    export const inboundSchema: z.ZodType<Territories, z.ZodTypeDef, unknown> = z
        .object({
            media_sets: z.lazy(() => AvailableVersionsMediaSetsMediaSets$.inboundSchema).optional(),
            territory: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.media_sets === undefined ? null : { mediaSets: v.media_sets }),
                ...(v.territory === undefined ? null : { territory: v.territory }),
            };
        });

    export type Outbound = {
        media_sets?: AvailableVersionsMediaSetsMediaSets$.Outbound | undefined;
        territory?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Territories> = z
        .object({
            mediaSets: z.lazy(() => AvailableVersionsMediaSetsMediaSets$.outboundSchema).optional(),
            territory: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.mediaSets === undefined ? null : { media_sets: v.mediaSets }),
                ...(v.territory === undefined ? null : { territory: v.territory }),
            };
        });
}

/** @internal */
export namespace MediaSet$ {
    export const inboundSchema: z.ZodType<MediaSet, z.ZodTypeDef, unknown> = z
        .object({
            actual_start: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            name: z.string(),
            territories: z.lazy(() => Territories$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.actual_start === undefined ? null : { actualStart: v.actual_start }),
                name: v.name,
                ...(v.territories === undefined ? null : { territories: v.territories }),
            };
        });

    export type Outbound = {
        actual_start?: string | undefined;
        name: string;
        territories?: Territories$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MediaSet> = z
        .object({
            actualStart: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            name: z.string(),
            territories: z.lazy(() => Territories$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.actualStart === undefined ? null : { actual_start: v.actualStart }),
                name: v.name,
                ...(v.territories === undefined ? null : { territories: v.territories }),
            };
        });
}

/** @internal */
export namespace MediaSets$ {
    export const inboundSchema: z.ZodType<MediaSets, z.ZodTypeDef, unknown> = z
        .object({
            media_set: z.array(z.lazy(() => MediaSet$.inboundSchema)),
        })
        .transform((v) => {
            return {
                mediaSet: v.media_set,
            };
        });

    export type Outbound = {
        media_set: Array<MediaSet$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MediaSets> = z
        .object({
            mediaSet: z.array(z.lazy(() => MediaSet$.outboundSchema)),
        })
        .transform((v) => {
            return {
                media_set: v.mediaSet,
            };
        });
}

/** @internal */
export namespace AvailableVersionsMediaSets$ {
    export const inboundSchema: z.ZodType<AvailableVersionsMediaSets, z.ZodTypeDef, unknown> = z
        .object({
            media_sets: z.lazy(() => MediaSets$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.media_sets === undefined ? null : { mediaSets: v.media_sets }),
            };
        });

    export type Outbound = {
        media_sets?: MediaSets$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AvailableVersionsMediaSets> = z
        .object({
            mediaSets: z.lazy(() => MediaSets$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.mediaSets === undefined ? null : { media_sets: v.mediaSets }),
            };
        });
}
