/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    ContributionsMixinContributor,
    ContributionsMixinContributor$,
} from "./contributionsmixincontributor";
import * as z from "zod";

export type ContributionsMixinContributionCreditRole = {
    numberText?: string | undefined;
    id?: string | undefined;
};

export type ContributionsMixinContributionContribution = {
    characterName?: string | undefined;
    contributionsMixinContributor?: ContributionsMixinContributor | undefined;
    creditRole?: ContributionsMixinContributionCreditRole | undefined;
};

export type CreditRole = {
    numberText?: string | undefined;
    id?: string | undefined;
};

export type Contribution = {
    characterName?: string | undefined;
    contribution: ContributionsMixinContributionContribution;
    contributionsMixinContributor?: ContributionsMixinContributor | undefined;
    creditRole?: CreditRole | undefined;
};

export type ContributionsMixinContribution = {
    contribution: Contribution;
};

/** @internal */
export namespace ContributionsMixinContributionCreditRole$ {
    export const inboundSchema: z.ZodType<
        ContributionsMixinContributionCreditRole,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            "#text": z.string().optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v["#text"] === undefined ? null : { numberText: v["#text"] }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        "#text"?: string | undefined;
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ContributionsMixinContributionCreditRole
    > = z
        .object({
            numberText: z.string().optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.numberText === undefined ? null : { "#text": v.numberText }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace ContributionsMixinContributionContribution$ {
    export const inboundSchema: z.ZodType<
        ContributionsMixinContributionContribution,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            character_name: z.string().optional(),
            contributions_mixin_contributor:
                ContributionsMixinContributor$.inboundSchema.optional(),
            credit_role: z
                .lazy(() => ContributionsMixinContributionCreditRole$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.character_name === undefined ? null : { characterName: v.character_name }),
                ...(v.contributions_mixin_contributor === undefined
                    ? null
                    : { contributionsMixinContributor: v.contributions_mixin_contributor }),
                ...(v.credit_role === undefined ? null : { creditRole: v.credit_role }),
            };
        });

    export type Outbound = {
        character_name?: string | undefined;
        contributions_mixin_contributor?: ContributionsMixinContributor$.Outbound | undefined;
        credit_role?: ContributionsMixinContributionCreditRole$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ContributionsMixinContributionContribution
    > = z
        .object({
            characterName: z.string().optional(),
            contributionsMixinContributor: ContributionsMixinContributor$.outboundSchema.optional(),
            creditRole: z
                .lazy(() => ContributionsMixinContributionCreditRole$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.characterName === undefined ? null : { character_name: v.characterName }),
                ...(v.contributionsMixinContributor === undefined
                    ? null
                    : { contributions_mixin_contributor: v.contributionsMixinContributor }),
                ...(v.creditRole === undefined ? null : { credit_role: v.creditRole }),
            };
        });
}

/** @internal */
export namespace CreditRole$ {
    export const inboundSchema: z.ZodType<CreditRole, z.ZodTypeDef, unknown> = z
        .object({
            "#text": z.string().optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v["#text"] === undefined ? null : { numberText: v["#text"] }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        "#text"?: string | undefined;
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreditRole> = z
        .object({
            numberText: z.string().optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.numberText === undefined ? null : { "#text": v.numberText }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace Contribution$ {
    export const inboundSchema: z.ZodType<Contribution, z.ZodTypeDef, unknown> = z
        .object({
            character_name: z.string().optional(),
            contribution: z.lazy(() => ContributionsMixinContributionContribution$.inboundSchema),
            contributions_mixin_contributor:
                ContributionsMixinContributor$.inboundSchema.optional(),
            credit_role: z.lazy(() => CreditRole$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.character_name === undefined ? null : { characterName: v.character_name }),
                contribution: v.contribution,
                ...(v.contributions_mixin_contributor === undefined
                    ? null
                    : { contributionsMixinContributor: v.contributions_mixin_contributor }),
                ...(v.credit_role === undefined ? null : { creditRole: v.credit_role }),
            };
        });

    export type Outbound = {
        character_name?: string | undefined;
        contribution: ContributionsMixinContributionContribution$.Outbound;
        contributions_mixin_contributor?: ContributionsMixinContributor$.Outbound | undefined;
        credit_role?: CreditRole$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Contribution> = z
        .object({
            characterName: z.string().optional(),
            contribution: z.lazy(() => ContributionsMixinContributionContribution$.outboundSchema),
            contributionsMixinContributor: ContributionsMixinContributor$.outboundSchema.optional(),
            creditRole: z.lazy(() => CreditRole$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.characterName === undefined ? null : { character_name: v.characterName }),
                contribution: v.contribution,
                ...(v.contributionsMixinContributor === undefined
                    ? null
                    : { contributions_mixin_contributor: v.contributionsMixinContributor }),
                ...(v.creditRole === undefined ? null : { credit_role: v.creditRole }),
            };
        });
}

/** @internal */
export namespace ContributionsMixinContribution$ {
    export const inboundSchema: z.ZodType<ContributionsMixinContribution, z.ZodTypeDef, unknown> = z
        .object({
            contribution: z.lazy(() => Contribution$.inboundSchema),
        })
        .transform((v) => {
            return {
                contribution: v.contribution,
            };
        });

    export type Outbound = {
        contribution: Contribution$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContributionsMixinContribution> =
        z
            .object({
                contribution: z.lazy(() => Contribution$.outboundSchema),
            })
            .transform((v) => {
                return {
                    contribution: v.contribution,
                };
            });
}
