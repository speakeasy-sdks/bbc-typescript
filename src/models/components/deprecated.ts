/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Deprecated = {
    deprecatedSince: string;
    name: string;
    replacedBy?: string | undefined;
    replacementType?: string | undefined;
    type: string;
};

/** @internal */
export namespace Deprecated$ {
    export const inboundSchema: z.ZodType<Deprecated, z.ZodTypeDef, unknown> = z
        .object({
            deprecated_since: z.string(),
            name: z.string(),
            replaced_by: z.string().optional(),
            replacement_type: z.string().optional(),
            type: z.string(),
        })
        .transform((v) => {
            return {
                deprecatedSince: v.deprecated_since,
                name: v.name,
                ...(v.replaced_by === undefined ? null : { replacedBy: v.replaced_by }),
                ...(v.replacement_type === undefined
                    ? null
                    : { replacementType: v.replacement_type }),
                type: v.type,
            };
        });

    export type Outbound = {
        deprecated_since: string;
        name: string;
        replaced_by?: string | undefined;
        replacement_type?: string | undefined;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Deprecated> = z
        .object({
            deprecatedSince: z.string(),
            name: z.string(),
            replacedBy: z.string().optional(),
            replacementType: z.string().optional(),
            type: z.string(),
        })
        .transform((v) => {
            return {
                deprecated_since: v.deprecatedSince,
                name: v.name,
                ...(v.replacedBy === undefined ? null : { replaced_by: v.replacedBy }),
                ...(v.replacementType === undefined
                    ? null
                    : { replacement_type: v.replacementType }),
                type: v.type,
            };
        });
}
