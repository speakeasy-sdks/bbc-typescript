/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type DeprecationAttributes = {
    deprecated: boolean;
    deprecatedSince: string;
    replacedBy: string;
};

/** @internal */
export namespace DeprecationAttributes$ {
    export const inboundSchema: z.ZodType<DeprecationAttributes, z.ZodTypeDef, unknown> = z
        .object({
            deprecated: z.boolean(),
            deprecated_since: z.string(),
            replaced_by: z.string(),
        })
        .transform((v) => {
            return {
                deprecated: v.deprecated,
                deprecatedSince: v.deprecated_since,
                replacedBy: v.replaced_by,
            };
        });

    export type Outbound = {
        deprecated: boolean;
        deprecated_since: string;
        replaced_by: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeprecationAttributes> = z
        .object({
            deprecated: z.boolean(),
            deprecatedSince: z.string(),
            replacedBy: z.string(),
        })
        .transform((v) => {
            return {
                deprecated: v.deprecated,
                deprecated_since: v.deprecatedSince,
                replaced_by: v.replacedBy,
            };
        });
}
