/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Deprecations, Deprecations$ } from "./deprecations";
import { Filters, Filters$ } from "./filters";
import { Mixins, Mixins$ } from "./mixins";
import { Pagination, Pagination$ } from "./pagination";
import { Results, Results$ } from "./results";
import { Sorts, Sorts$ } from "./sorts";
import * as z from "zod";

export type Nitro = {
    deprecations?: Deprecations | undefined;
    filters?: Filters | undefined;
    mixins?: Mixins | undefined;
    pagination?: Pagination | undefined;
    results?: Results | undefined;
    sorts?: Sorts | undefined;
    additionalProperties: { [k: string]: any };
};

/** @internal */
export namespace Nitro$ {
    export const inboundSchema: z.ZodType<Nitro, z.ZodTypeDef, unknown> = z
        .object({
            deprecations: Deprecations$.inboundSchema.optional(),
            filters: Filters$.inboundSchema.optional(),
            mixins: Mixins$.inboundSchema.optional(),
            pagination: Pagination$.inboundSchema.optional(),
            results: Results$.inboundSchema.optional(),
            sorts: Sorts$.inboundSchema.optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const {
                deprecations,
                filters,
                mixins,
                pagination,
                results,
                sorts,
                ...additionalProperties
            } = v;

            return {
                ...(v.deprecations === undefined ? null : { deprecations: v.deprecations }),
                ...(v.filters === undefined ? null : { filters: v.filters }),
                ...(v.mixins === undefined ? null : { mixins: v.mixins }),
                ...(v.pagination === undefined ? null : { pagination: v.pagination }),
                ...(v.results === undefined ? null : { results: v.results }),
                ...(v.sorts === undefined ? null : { sorts: v.sorts }),
                additionalProperties,
            };
        });

    export type Outbound = {
        deprecations?: Deprecations$.Outbound | undefined;
        filters?: Filters$.Outbound | undefined;
        mixins?: Mixins$.Outbound | undefined;
        pagination?: Pagination$.Outbound | undefined;
        results?: Results$.Outbound | undefined;
        sorts?: Sorts$.Outbound | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Nitro> = z
        .object({
            deprecations: Deprecations$.outboundSchema.optional(),
            filters: Filters$.outboundSchema.optional(),
            mixins: Mixins$.outboundSchema.optional(),
            pagination: Pagination$.outboundSchema.optional(),
            results: Results$.outboundSchema.optional(),
            sorts: Sorts$.outboundSchema.optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...(v.deprecations === undefined ? null : { deprecations: v.deprecations }),
                ...(v.filters === undefined ? null : { filters: v.filters }),
                ...(v.mixins === undefined ? null : { mixins: v.mixins }),
                ...(v.pagination === undefined ? null : { pagination: v.pagination }),
                ...(v.results === undefined ? null : { results: v.results }),
                ...(v.sorts === undefined ? null : { sorts: v.sorts }),
            };
        });
}
