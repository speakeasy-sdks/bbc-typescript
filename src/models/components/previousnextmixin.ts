/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Reference, Reference$ } from "./reference";
import * as z from "zod";

export type PreviousNextMixinPreviousNext = {
    next?: Reference | undefined;
    previous?: Reference | undefined;
};

export type PreviousNext = {
    next?: Reference | undefined;
    previous?: Reference | undefined;
    previousNext: PreviousNextMixinPreviousNext;
};

export type PreviousNextMixin = {
    previousNext: PreviousNext;
};

/** @internal */
export namespace PreviousNextMixinPreviousNext$ {
    export const inboundSchema: z.ZodType<PreviousNextMixinPreviousNext, z.ZodTypeDef, unknown> = z
        .object({
            next: Reference$.inboundSchema.optional(),
            previous: Reference$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.previous === undefined ? null : { previous: v.previous }),
            };
        });

    export type Outbound = {
        next?: Reference$.Outbound | undefined;
        previous?: Reference$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PreviousNextMixinPreviousNext> =
        z
            .object({
                next: Reference$.outboundSchema.optional(),
                previous: Reference$.outboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.next === undefined ? null : { next: v.next }),
                    ...(v.previous === undefined ? null : { previous: v.previous }),
                };
            });
}

/** @internal */
export namespace PreviousNext$ {
    export const inboundSchema: z.ZodType<PreviousNext, z.ZodTypeDef, unknown> = z
        .object({
            next: Reference$.inboundSchema.optional(),
            previous: Reference$.inboundSchema.optional(),
            previous_next: z.lazy(() => PreviousNextMixinPreviousNext$.inboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.previous === undefined ? null : { previous: v.previous }),
                previousNext: v.previous_next,
            };
        });

    export type Outbound = {
        next?: Reference$.Outbound | undefined;
        previous?: Reference$.Outbound | undefined;
        previous_next: PreviousNextMixinPreviousNext$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PreviousNext> = z
        .object({
            next: Reference$.outboundSchema.optional(),
            previous: Reference$.outboundSchema.optional(),
            previousNext: z.lazy(() => PreviousNextMixinPreviousNext$.outboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.previous === undefined ? null : { previous: v.previous }),
                previous_next: v.previousNext,
            };
        });
}

/** @internal */
export namespace PreviousNextMixin$ {
    export const inboundSchema: z.ZodType<PreviousNextMixin, z.ZodTypeDef, unknown> = z
        .object({
            previous_next: z.lazy(() => PreviousNext$.inboundSchema),
        })
        .transform((v) => {
            return {
                previousNext: v.previous_next,
            };
        });

    export type Outbound = {
        previous_next: PreviousNext$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PreviousNextMixin> = z
        .object({
            previousNext: z.lazy(() => PreviousNext$.outboundSchema),
        })
        .transform((v) => {
            return {
                previous_next: v.previousNext,
            };
        });
}
