/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Identifier, Identifier$ } from "./identifier";
import * as z from "zod";

export type Identifiers = {
    identifier: Array<Identifier>;
};

/** @internal */
export namespace Identifiers$ {
    export const inboundSchema: z.ZodType<Identifiers, z.ZodTypeDef, unknown> = z
        .object({
            identifier: z.array(Identifier$.inboundSchema),
        })
        .transform((v) => {
            return {
                identifier: v.identifier,
            };
        });

    export type Outbound = {
        identifier: Array<Identifier$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Identifiers> = z
        .object({
            identifier: z.array(Identifier$.outboundSchema),
        })
        .transform((v) => {
            return {
                identifier: v.identifier,
            };
        });
}
