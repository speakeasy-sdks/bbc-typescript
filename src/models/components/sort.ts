/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ReleaseStatusType, ReleaseStatusType$ } from "./releasestatustype";
import { SortDirection, SortDirection$ } from "./sortdirection";
import * as z from "zod";

export type Sort = {
    deprecated?: boolean | undefined;
    deprecatedSince?: string | undefined;
    guaranteedUntil?: string | undefined;
    isDefault?: string | undefined;
    name: string;
    releaseStatus?: ReleaseStatusType | undefined;
    replacedBy?: string | undefined;
    sortDirection?: Array<SortDirection> | undefined;
    title: string;
};

/** @internal */
export namespace Sort$ {
    export const inboundSchema: z.ZodType<Sort, z.ZodTypeDef, unknown> = z
        .object({
            deprecated: z.boolean().optional(),
            deprecated_since: z.string().optional(),
            guaranteed_until: z.string().optional(),
            is_default: z.string().optional(),
            name: z.string(),
            release_status: ReleaseStatusType$.inboundSchema.optional(),
            replaced_by: z.string().optional(),
            sort_direction: z.array(SortDirection$.inboundSchema).optional(),
            title: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.deprecated === undefined ? null : { deprecated: v.deprecated }),
                ...(v.deprecated_since === undefined
                    ? null
                    : { deprecatedSince: v.deprecated_since }),
                ...(v.guaranteed_until === undefined
                    ? null
                    : { guaranteedUntil: v.guaranteed_until }),
                ...(v.is_default === undefined ? null : { isDefault: v.is_default }),
                name: v.name,
                ...(v.release_status === undefined ? null : { releaseStatus: v.release_status }),
                ...(v.replaced_by === undefined ? null : { replacedBy: v.replaced_by }),
                ...(v.sort_direction === undefined ? null : { sortDirection: v.sort_direction }),
                title: v.title,
            };
        });

    export type Outbound = {
        deprecated?: boolean | undefined;
        deprecated_since?: string | undefined;
        guaranteed_until?: string | undefined;
        is_default?: string | undefined;
        name: string;
        release_status?: string | undefined;
        replaced_by?: string | undefined;
        sort_direction?: Array<SortDirection$.Outbound> | undefined;
        title: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Sort> = z
        .object({
            deprecated: z.boolean().optional(),
            deprecatedSince: z.string().optional(),
            guaranteedUntil: z.string().optional(),
            isDefault: z.string().optional(),
            name: z.string(),
            releaseStatus: ReleaseStatusType$.outboundSchema.optional(),
            replacedBy: z.string().optional(),
            sortDirection: z.array(SortDirection$.outboundSchema).optional(),
            title: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.deprecated === undefined ? null : { deprecated: v.deprecated }),
                ...(v.deprecatedSince === undefined
                    ? null
                    : { deprecated_since: v.deprecatedSince }),
                ...(v.guaranteedUntil === undefined
                    ? null
                    : { guaranteed_until: v.guaranteedUntil }),
                ...(v.isDefault === undefined ? null : { is_default: v.isDefault }),
                name: v.name,
                ...(v.releaseStatus === undefined ? null : { release_status: v.releaseStatus }),
                ...(v.replacedBy === undefined ? null : { replaced_by: v.replacedBy }),
                ...(v.sortDirection === undefined ? null : { sort_direction: v.sortDirection }),
                title: v.title,
            };
        });
}
