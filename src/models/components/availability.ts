/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AccurateProgrammeTime, AccurateProgrammeTime$ } from "./accurateprogrammetime";
import { AvailabilityDebug, AvailabilityDebug$ } from "./availabilitydebug";
import { AvailabilityOf, AvailabilityOf$ } from "./availabilityof";
import { AvailabilityType, AvailabilityType$ } from "./availabilitytype";
import { MediaAvailabilityTime, MediaAvailabilityTime$ } from "./mediaavailabilitytime";
import { ScheduledTime, ScheduledTime$ } from "./scheduledtime";
import * as z from "zod";

export type Availability = {
    accurateProgrammeTime?: AccurateProgrammeTime | undefined;
    actualStart?: Date | undefined;
    availabilityDebug?: AvailabilityDebug | undefined;
    availabilityOf?: Array<AvailabilityOf> | undefined;
    availabilityType: AvailabilityType;
    mediaAvailabilityTime?: MediaAvailabilityTime | undefined;
    mediaSet?: Array<string> | undefined;
    revocationStatus?: string | undefined;
    scheduledTime?: ScheduledTime | undefined;
    status: string;
};

/** @internal */
export namespace Availability$ {
    export const inboundSchema: z.ZodType<Availability, z.ZodTypeDef, unknown> = z
        .object({
            accurate_programme_time: AccurateProgrammeTime$.inboundSchema.optional(),
            actual_start: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            "availability-debug": AvailabilityDebug$.inboundSchema.optional(),
            availability_of: z.array(AvailabilityOf$.inboundSchema).optional(),
            availability_type: AvailabilityType$.inboundSchema,
            media_availability_time: MediaAvailabilityTime$.inboundSchema.optional(),
            media_set: z.array(z.string()).optional(),
            revocation_status: z.string().optional(),
            scheduled_time: ScheduledTime$.inboundSchema.optional(),
            status: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.accurate_programme_time === undefined
                    ? null
                    : { accurateProgrammeTime: v.accurate_programme_time }),
                ...(v.actual_start === undefined ? null : { actualStart: v.actual_start }),
                ...(v["availability-debug"] === undefined
                    ? null
                    : { availabilityDebug: v["availability-debug"] }),
                ...(v.availability_of === undefined ? null : { availabilityOf: v.availability_of }),
                availabilityType: v.availability_type,
                ...(v.media_availability_time === undefined
                    ? null
                    : { mediaAvailabilityTime: v.media_availability_time }),
                ...(v.media_set === undefined ? null : { mediaSet: v.media_set }),
                ...(v.revocation_status === undefined
                    ? null
                    : { revocationStatus: v.revocation_status }),
                ...(v.scheduled_time === undefined ? null : { scheduledTime: v.scheduled_time }),
                status: v.status,
            };
        });

    export type Outbound = {
        accurate_programme_time?: AccurateProgrammeTime$.Outbound | undefined;
        actual_start?: string | undefined;
        "availability-debug"?: AvailabilityDebug$.Outbound | undefined;
        availability_of?: Array<AvailabilityOf$.Outbound> | undefined;
        availability_type: string;
        media_availability_time?: MediaAvailabilityTime$.Outbound | undefined;
        media_set?: Array<string> | undefined;
        revocation_status?: string | undefined;
        scheduled_time?: ScheduledTime$.Outbound | undefined;
        status: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Availability> = z
        .object({
            accurateProgrammeTime: AccurateProgrammeTime$.outboundSchema.optional(),
            actualStart: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            availabilityDebug: AvailabilityDebug$.outboundSchema.optional(),
            availabilityOf: z.array(AvailabilityOf$.outboundSchema).optional(),
            availabilityType: AvailabilityType$.outboundSchema,
            mediaAvailabilityTime: MediaAvailabilityTime$.outboundSchema.optional(),
            mediaSet: z.array(z.string()).optional(),
            revocationStatus: z.string().optional(),
            scheduledTime: ScheduledTime$.outboundSchema.optional(),
            status: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.accurateProgrammeTime === undefined
                    ? null
                    : { accurate_programme_time: v.accurateProgrammeTime }),
                ...(v.actualStart === undefined ? null : { actual_start: v.actualStart }),
                ...(v.availabilityDebug === undefined
                    ? null
                    : { "availability-debug": v.availabilityDebug }),
                ...(v.availabilityOf === undefined ? null : { availability_of: v.availabilityOf }),
                availability_type: v.availabilityType,
                ...(v.mediaAvailabilityTime === undefined
                    ? null
                    : { media_availability_time: v.mediaAvailabilityTime }),
                ...(v.mediaSet === undefined ? null : { media_set: v.mediaSet }),
                ...(v.revocationStatus === undefined
                    ? null
                    : { revocation_status: v.revocationStatus }),
                ...(v.scheduledTime === undefined ? null : { scheduled_time: v.scheduledTime }),
                status: v.status,
            };
        });
}
