/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type OffsetIn = {
    href: string;
    offset?: number | undefined;
    position?: number | undefined;
    programme: string;
    version: string;
};

/** @internal */
export namespace OffsetIn$ {
    export const inboundSchema: z.ZodType<OffsetIn, z.ZodTypeDef, unknown> = z
        .object({
            href: z.string(),
            offset: z.number().int().optional(),
            position: z.number().optional(),
            programme: z.string(),
            version: z.string(),
        })
        .transform((v) => {
            return {
                href: v.href,
                ...(v.offset === undefined ? null : { offset: v.offset }),
                ...(v.position === undefined ? null : { position: v.position }),
                programme: v.programme,
                version: v.version,
            };
        });

    export type Outbound = {
        href: string;
        offset?: number | undefined;
        position?: number | undefined;
        programme: string;
        version: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OffsetIn> = z
        .object({
            href: z.string(),
            offset: z.number().int().optional(),
            position: z.number().optional(),
            programme: z.string(),
            version: z.string(),
        })
        .transform((v) => {
            return {
                href: v.href,
                ...(v.offset === undefined ? null : { offset: v.offset }),
                ...(v.position === undefined ? null : { position: v.position }),
                programme: v.programme,
                version: v.version,
            };
        });
}
