/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type AlternateImagesMixinAlternateImage = {
    href?: string | undefined;
    templateUrl: string;
    type?: string | undefined;
};

export type AlternateImagesMixinAlternateImages = {
    alternateImage?: Array<AlternateImagesMixinAlternateImage> | undefined;
};

export type AlternateImage = {
    alternateImages: AlternateImagesMixinAlternateImages;
    href?: string | undefined;
    templateUrl: string;
    type?: string | undefined;
};

export type AlternateImages = {
    alternateImage?: Array<AlternateImage> | undefined;
};

export type AlternateImagesMixin = {
    alternateImages: AlternateImages;
};

/** @internal */
export namespace AlternateImagesMixinAlternateImage$ {
    export const inboundSchema: z.ZodType<
        AlternateImagesMixinAlternateImage,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            href: z.string().optional(),
            template_url: z.string(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.href === undefined ? null : { href: v.href }),
                templateUrl: v.template_url,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        href?: string | undefined;
        template_url: string;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AlternateImagesMixinAlternateImage
    > = z
        .object({
            href: z.string().optional(),
            templateUrl: z.string(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.href === undefined ? null : { href: v.href }),
                template_url: v.templateUrl,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace AlternateImagesMixinAlternateImages$ {
    export const inboundSchema: z.ZodType<
        AlternateImagesMixinAlternateImages,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            alternate_image: z
                .array(z.lazy(() => AlternateImagesMixinAlternateImage$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.alternate_image === undefined ? null : { alternateImage: v.alternate_image }),
            };
        });

    export type Outbound = {
        alternate_image?: Array<AlternateImagesMixinAlternateImage$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AlternateImagesMixinAlternateImages
    > = z
        .object({
            alternateImage: z
                .array(z.lazy(() => AlternateImagesMixinAlternateImage$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.alternateImage === undefined ? null : { alternate_image: v.alternateImage }),
            };
        });
}

/** @internal */
export namespace AlternateImage$ {
    export const inboundSchema: z.ZodType<AlternateImage, z.ZodTypeDef, unknown> = z
        .object({
            alternate_images: z.lazy(() => AlternateImagesMixinAlternateImages$.inboundSchema),
            href: z.string().optional(),
            template_url: z.string(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                alternateImages: v.alternate_images,
                ...(v.href === undefined ? null : { href: v.href }),
                templateUrl: v.template_url,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        alternate_images: AlternateImagesMixinAlternateImages$.Outbound;
        href?: string | undefined;
        template_url: string;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AlternateImage> = z
        .object({
            alternateImages: z.lazy(() => AlternateImagesMixinAlternateImages$.outboundSchema),
            href: z.string().optional(),
            templateUrl: z.string(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                alternate_images: v.alternateImages,
                ...(v.href === undefined ? null : { href: v.href }),
                template_url: v.templateUrl,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace AlternateImages$ {
    export const inboundSchema: z.ZodType<AlternateImages, z.ZodTypeDef, unknown> = z
        .object({
            alternate_image: z.array(z.lazy(() => AlternateImage$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.alternate_image === undefined ? null : { alternateImage: v.alternate_image }),
            };
        });

    export type Outbound = {
        alternate_image?: Array<AlternateImage$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AlternateImages> = z
        .object({
            alternateImage: z.array(z.lazy(() => AlternateImage$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.alternateImage === undefined ? null : { alternate_image: v.alternateImage }),
            };
        });
}

/** @internal */
export namespace AlternateImagesMixin$ {
    export const inboundSchema: z.ZodType<AlternateImagesMixin, z.ZodTypeDef, unknown> = z
        .object({
            alternate_images: z.lazy(() => AlternateImages$.inboundSchema),
        })
        .transform((v) => {
            return {
                alternateImages: v.alternate_images,
            };
        });

    export type Outbound = {
        alternate_images: AlternateImages$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AlternateImagesMixin> = z
        .object({
            alternateImages: z.lazy(() => AlternateImages$.outboundSchema),
        })
        .transform((v) => {
            return {
                alternate_images: v.alternateImages,
            };
        });
}
