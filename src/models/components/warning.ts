/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Warning = {
    numberText?: string | undefined;
    shortDescription?: string | undefined;
    warningCode?: string | undefined;
};

/** @internal */
export namespace Warning$ {
    export const inboundSchema: z.ZodType<Warning, z.ZodTypeDef, unknown> = z
        .object({
            "#text": z.string().optional(),
            short_description: z.string().optional(),
            warning_code: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v["#text"] === undefined ? null : { numberText: v["#text"] }),
                ...(v.short_description === undefined
                    ? null
                    : { shortDescription: v.short_description }),
                ...(v.warning_code === undefined ? null : { warningCode: v.warning_code }),
            };
        });

    export type Outbound = {
        "#text"?: string | undefined;
        short_description?: string | undefined;
        warning_code?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Warning> = z
        .object({
            numberText: z.string().optional(),
            shortDescription: z.string().optional(),
            warningCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.numberText === undefined ? null : { "#text": v.numberText }),
                ...(v.shortDescription === undefined
                    ? null
                    : { short_description: v.shortDescription }),
                ...(v.warningCode === undefined ? null : { warning_code: v.warningCode }),
            };
        });
}
