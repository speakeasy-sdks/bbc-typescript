/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Dimensions, Dimensions$ } from "./dimensions";
import { FocusPoint, FocusPoint$ } from "./focuspoint";
import { Size, Size$ } from "./size";
import * as z from "zod";

export type SourceAsset = {
    dimensions?: Dimensions | undefined;
    focusPoint?: FocusPoint | undefined;
    mimeType?: string | undefined;
    size?: Size | undefined;
    uri?: string | undefined;
};

/** @internal */
export namespace SourceAsset$ {
    export const inboundSchema: z.ZodType<SourceAsset, z.ZodTypeDef, unknown> = z
        .object({
            dimensions: Dimensions$.inboundSchema.optional(),
            focus_point: FocusPoint$.inboundSchema.optional(),
            mime_type: z.string().optional(),
            size: Size$.inboundSchema.optional(),
            uri: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.dimensions === undefined ? null : { dimensions: v.dimensions }),
                ...(v.focus_point === undefined ? null : { focusPoint: v.focus_point }),
                ...(v.mime_type === undefined ? null : { mimeType: v.mime_type }),
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.uri === undefined ? null : { uri: v.uri }),
            };
        });

    export type Outbound = {
        dimensions?: Dimensions$.Outbound | undefined;
        focus_point?: FocusPoint$.Outbound | undefined;
        mime_type?: string | undefined;
        size?: Size$.Outbound | undefined;
        uri?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SourceAsset> = z
        .object({
            dimensions: Dimensions$.outboundSchema.optional(),
            focusPoint: FocusPoint$.outboundSchema.optional(),
            mimeType: z.string().optional(),
            size: Size$.outboundSchema.optional(),
            uri: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.dimensions === undefined ? null : { dimensions: v.dimensions }),
                ...(v.focusPoint === undefined ? null : { focus_point: v.focusPoint }),
                ...(v.mimeType === undefined ? null : { mime_type: v.mimeType }),
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.uri === undefined ? null : { uri: v.uri }),
            };
        });
}
