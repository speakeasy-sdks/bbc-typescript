/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import * as components from "../components";
import * as z from "zod";

/**
 * Sorts:
 *
 * @remarks
 * * group_position: sort numerically by position in group, ascending
 * * pid: sort alphabetically by PID, descending
 * * position: sort numerically by position, ascending
 * * promotion: sort by promotion rank, ascending
 * * release_date: sort chronologically by release date, descending
 * * relevance: sort by weighting of search term (use with q parameter)
 * * scheduled_start: sort chronologically by scheduled start time/date, ascending
 * * strict_title: sort alphabetically by title, ascending
 * * title: sort by title librarian style (ignoring leading 'The', 'A', etc), ascending
 * * tree: sort by root pid and then preorder tree sort. Requires entities to have release date.
 *
 */
export enum ListProgrammesQueryParamSort {
    GroupPosition = "group_position",
    Pid = "pid",
    Position = "position",
    Promotion = "promotion",
    ReleaseDate = "release_date",
    Relevance = "relevance",
    ScheduledStart = "scheduled_start",
    StrictTitle = "strict_title",
    Title = "title",
    Tree = "tree",
}

/**
 * Sort direction
 */
export enum ListProgrammesQueryParamSortDirection {
    Ascending = "ascending",
    Descending = "descending",
}

export enum ListProgrammesQueryParamMixin {
    AlternateImages = "alternate_images",
    AncestorTitles = "ancestor_titles",
    Availability = "availability",
    AvailableSimulcasts = "available_simulcasts",
    AvailableVersions = "available_versions",
    AvailableWebcasts = "available_webcasts",
    Contributions = "contributions",
    Duration = "duration",
    GenreGroupings = "genre_groupings",
    GenreGroups = "genre_groups",
    Images = "images",
    IsEmbeddable = "is_embeddable",
    PreviousNext = "previous_next",
    ProgrammeType = "programme_type",
    RelatedLinks = "related_links",
    Titles = "titles",
    VersionsAvailability = "versions_availability",
}

export enum AudioDescribed {
    True = "true",
    False = "false",
}

export enum QueryParamAvailability {
    Available = "available",
    Pending = "pending",
}

export enum AvailabilityEntityType {
    Episode = "episode",
    Clip = "clip",
}

export enum AvailabilityType {
    Ondemand = "ondemand",
    Webcast = "webcast",
    Simulcast = "simulcast",
}

export enum Duration {
    Short = "short",
    Medium = "medium",
    Long = "long",
}

export enum EntityType {
    Brand = "brand",
    Series = "series",
    Episode = "episode",
    Clip = "clip",
}

export enum MediaType {
    Audio = "audio",
    AudioVideo = "audio_video",
}

export enum PaymentType {
    Free = "free",
    Bbcstore = "bbcstore",
    Uscansvod = "uscansvod",
}

export enum Signed {
    Exclusive = "exclusive",
    Inclusive = "inclusive",
    Exclude = "exclude",
}

export enum Tleo {
    True = "true",
    False = "false",
}

/**
 * Control return of embargoed items (undocumented)
 */
export enum ListProgrammesQueryParamEmbargoed {
    Include = "include",
    Exclude = "exclude",
    Only = "only",
}

export type ListProgrammesRequest = {
    /**
     * Sorts:
     *
     * @remarks
     * * group_position: sort numerically by position in group, ascending
     * * pid: sort alphabetically by PID, descending
     * * position: sort numerically by position, ascending
     * * promotion: sort by promotion rank, ascending
     * * release_date: sort chronologically by release date, descending
     * * relevance: sort by weighting of search term (use with q parameter)
     * * scheduled_start: sort chronologically by scheduled start time/date, ascending
     * * strict_title: sort alphabetically by title, ascending
     * * title: sort by title librarian style (ignoring leading 'The', 'A', etc), ascending
     * * tree: sort by root pid and then preorder tree sort. Requires entities to have release date.
     *
     */
    sort?: ListProgrammesQueryParamSort | undefined;
    /**
     * Sort direction
     */
    sortDirection?: ListProgrammesQueryParamSortDirection | undefined;
    /**
     * Mixins:
     *
     * @remarks
     * * alternate_images: mixin to return the alternate images for a programme
     * * ancestor_titles: mixin to return ancestor programme titles
     * * availability: mixin to return programme availability information
     * * available_simulcasts: mixin to return information about programmes that are currently available as simulcasts
     * * available_versions: mixin to return information about programmes that are currently available on demand
     * * available_webcasts: mixin to return information about programmes that are currently available as webcasts
     * * contributions: mixin to return information about contributors to a programme
     * * duration: mixin to return original version duration in programme concept entities
     * * genre_groupings: mixin to return list of genre groupings
     * * genre_groups: mixin to return list of genre groups
     * * images: mixin to add image information for a programme
     * * is_embeddable: mixin to add embeddable information for a programme
     * * previous_next: mixin to return the programmes which appear before and after a programme (as determined by the sort applied in the request)
     * * programme_type: mixin to return the programme type
     * * related_links: mixin to return information about related links to a programme
     * * titles: mixin to return ancestor programme titles
     * * versions_availability: mixin to return information about programmes that are currently available
     *
     */
    mixin?: Array<ListProgrammesQueryParamMixin> | undefined;
    /**
     * filter for subset of programmes that are audio-described
     */
    audioDescribed?: Array<AudioDescribed> | undefined;
    /**
     * filter for subset of programmes that have availability
     */
    availability?: Array<QueryParamAvailability> | undefined;
    /**
     * additional filter when availability=available
     */
    availabilityEntityType?: Array<AvailabilityEntityType> | undefined;
    /**
     * filter for subset of programmes that are available after or at the specified datetime
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    availabilityFrom?: Date | undefined;
    /**
     * filter for a subset of programmes that are available for a given type
     */
    availabilityType?: Array<AvailabilityType> | undefined;
    /**
     * filter for subset of programmes that have PID as immediate parent
     */
    childrenOf?: Array<string> | undefined;
    /**
     * filter for subset of programmes that have PID as ancestor
     */
    descendantsOf?: Array<string> | undefined;
    /**
     * filter for subset of programmes that have given duration
     */
    duration?: Array<Duration> | undefined;
    /**
     * filter for subset of programmes that have given entity type
     */
    entityType?: Array<EntityType> | undefined;
    /**
     * filter for subset of programmes with format
     */
    format?: Array<string> | undefined;
    /**
     * filter for subset of programmes with genre
     */
    genre?: Array<string> | undefined;
    /**
     * filter for subset of programmes which belong to the given group pid
     */
    group?: string | undefined;
    /**
     * filter for subset of programmes with title beginning with initial letter librarian style (ignoring leading 'The', 'An' (Welsh), etc) 0-9 a-z
     */
    initialLetter?: string | undefined;
    /**
     * Programmes with (librarian) titles whose initial letter is equal/before given letter. Use with initial_letter_start for a range
     */
    initialLetterEnd?: string | undefined;
    /**
     * Programmes with (librarian) titles whose initial letter is equal/after given letter. Use with initial_letter_end for range.
     */
    initialLetterStart?: string | undefined;
    /**
     * filter for subset of programmes with title beginning with initial letter
     */
    initialLetterStrict?: Array<string> | undefined;
    /**
     * filter for subset of programmes with linked to versions which have the given item pids
     */
    item?: Array<string> | undefined;
    /**
     * filter for subset of programmes with master_brand
     */
    masterBrand?: Array<string> | undefined;
    /**
     * filter for subset of programmes with media set
     */
    mediaSet?: string | undefined;
    /**
     * filter for subset of programmes with media type
     */
    mediaType?: Array<MediaType> | undefined;
    /**
     * which page of results to return
     */
    page?: number | undefined;
    /**
     * number of results in each page
     */
    pageSize?: number | undefined;
    /**
     * filter for programmes by partner ID
     */
    partnerId?: Array<string> | undefined;
    /**
     * filter for programmes by partner PID
     */
    partnerPid?: Array<string> | undefined;
    /**
     * filter for a subset of programmes that are of the given payment_type
     */
    paymentType?: Array<PaymentType> | undefined;
    /**
     * filter for subset of programmes with contributions by given people PID
     */
    people?: string | undefined;
    /**
     * filter for subset of programmes having given PID
     */
    pid?: Array<string> | undefined;
    /**
     * filter for subset of programmes which are promoted for given service
     */
    promotedFor?: string | undefined;
    /**
     * filter for subset of programmes matching supplied keyword/phrase (boolean operators permitted)
     */
    q?: string | undefined;
    /**
     * filter for subset of programmes that are signed
     */
    signed?: Array<Signed> | undefined;
    /**
     * filter for subset of programmes with tag
     */
    tagName?: string | undefined;
    /**
     * filter for subset of programmes with a tag
     */
    tagScheme?: string | undefined;
    /**
     * filter for subset of programmes that are TLEOs
     */
    tleo?: Array<Tleo> | undefined;
    /**
     * filter for subset of programmes with given PID as one of their versions
     */
    version?: Array<string> | undefined;
    /**
     * Control return of embargoed items (undocumented)
     */
    embargoed?: ListProgrammesQueryParamEmbargoed | undefined;
};

export type ListProgrammesResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Nitro response
     */
    nitro?: components.Nitro | undefined;
    body?: Uint8Array | string | undefined;
    /**
     * Unexpected error
     */
    errorModel?: components.ErrorModel | undefined;
};

/** @internal */
export namespace ListProgrammesQueryParamSort$ {
    export const inboundSchema = z.nativeEnum(ListProgrammesQueryParamSort);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListProgrammesQueryParamSortDirection$ {
    export const inboundSchema = z.nativeEnum(ListProgrammesQueryParamSortDirection);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListProgrammesQueryParamMixin$ {
    export const inboundSchema = z.nativeEnum(ListProgrammesQueryParamMixin);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AudioDescribed$ {
    export const inboundSchema = z.nativeEnum(AudioDescribed);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace QueryParamAvailability$ {
    export const inboundSchema = z.nativeEnum(QueryParamAvailability);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AvailabilityEntityType$ {
    export const inboundSchema = z.nativeEnum(AvailabilityEntityType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AvailabilityType$ {
    export const inboundSchema = z.nativeEnum(AvailabilityType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Duration$ {
    export const inboundSchema = z.nativeEnum(Duration);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace EntityType$ {
    export const inboundSchema = z.nativeEnum(EntityType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace MediaType$ {
    export const inboundSchema = z.nativeEnum(MediaType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentType$ {
    export const inboundSchema = z.nativeEnum(PaymentType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Signed$ {
    export const inboundSchema = z.nativeEnum(Signed);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Tleo$ {
    export const inboundSchema = z.nativeEnum(Tleo);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListProgrammesQueryParamEmbargoed$ {
    export const inboundSchema = z.nativeEnum(ListProgrammesQueryParamEmbargoed);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListProgrammesRequest$ {
    export const inboundSchema: z.ZodType<ListProgrammesRequest, z.ZodTypeDef, unknown> = z
        .object({
            sort: ListProgrammesQueryParamSort$.inboundSchema.optional(),
            sort_direction: ListProgrammesQueryParamSortDirection$.inboundSchema.optional(),
            mixin: z.array(ListProgrammesQueryParamMixin$.inboundSchema).optional(),
            audio_described: z.array(AudioDescribed$.inboundSchema).optional(),
            availability: z.array(QueryParamAvailability$.inboundSchema).optional(),
            availability_entity_type: z.array(AvailabilityEntityType$.inboundSchema).optional(),
            availability_from: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            availability_type: z.array(AvailabilityType$.inboundSchema).optional(),
            children_of: z.array(z.string()).optional(),
            descendants_of: z.array(z.string()).optional(),
            duration: z.array(Duration$.inboundSchema).optional(),
            entity_type: z.array(EntityType$.inboundSchema).optional(),
            format: z.array(z.string()).optional(),
            genre: z.array(z.string()).optional(),
            group: z.string().optional(),
            initial_letter: z.string().optional(),
            initial_letter_end: z.string().optional(),
            initial_letter_start: z.string().optional(),
            initial_letter_strict: z.array(z.string()).optional(),
            item: z.array(z.string()).optional(),
            master_brand: z.array(z.string()).optional(),
            media_set: z.string().optional(),
            media_type: z.array(MediaType$.inboundSchema).optional(),
            page: z.number().int().default(1),
            page_size: z.number().int().default(10),
            partner_id: z.array(z.string()).optional(),
            partner_pid: z.array(z.string()).optional(),
            payment_type: z.array(PaymentType$.inboundSchema).optional(),
            people: z.string().optional(),
            pid: z.array(z.string()).optional(),
            promoted_for: z.string().optional(),
            q: z.string().optional(),
            signed: z.array(Signed$.inboundSchema).optional(),
            tag_name: z.string().optional(),
            tag_scheme: z.string().optional(),
            tleo: z.array(Tleo$.inboundSchema).optional(),
            version: z.array(z.string()).optional(),
            embargoed: ListProgrammesQueryParamEmbargoed$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.sort_direction === undefined ? null : { sortDirection: v.sort_direction }),
                ...(v.mixin === undefined ? null : { mixin: v.mixin }),
                ...(v.audio_described === undefined ? null : { audioDescribed: v.audio_described }),
                ...(v.availability === undefined ? null : { availability: v.availability }),
                ...(v.availability_entity_type === undefined
                    ? null
                    : { availabilityEntityType: v.availability_entity_type }),
                ...(v.availability_from === undefined
                    ? null
                    : { availabilityFrom: v.availability_from }),
                ...(v.availability_type === undefined
                    ? null
                    : { availabilityType: v.availability_type }),
                ...(v.children_of === undefined ? null : { childrenOf: v.children_of }),
                ...(v.descendants_of === undefined ? null : { descendantsOf: v.descendants_of }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.entity_type === undefined ? null : { entityType: v.entity_type }),
                ...(v.format === undefined ? null : { format: v.format }),
                ...(v.genre === undefined ? null : { genre: v.genre }),
                ...(v.group === undefined ? null : { group: v.group }),
                ...(v.initial_letter === undefined ? null : { initialLetter: v.initial_letter }),
                ...(v.initial_letter_end === undefined
                    ? null
                    : { initialLetterEnd: v.initial_letter_end }),
                ...(v.initial_letter_start === undefined
                    ? null
                    : { initialLetterStart: v.initial_letter_start }),
                ...(v.initial_letter_strict === undefined
                    ? null
                    : { initialLetterStrict: v.initial_letter_strict }),
                ...(v.item === undefined ? null : { item: v.item }),
                ...(v.master_brand === undefined ? null : { masterBrand: v.master_brand }),
                ...(v.media_set === undefined ? null : { mediaSet: v.media_set }),
                ...(v.media_type === undefined ? null : { mediaType: v.media_type }),
                page: v.page,
                pageSize: v.page_size,
                ...(v.partner_id === undefined ? null : { partnerId: v.partner_id }),
                ...(v.partner_pid === undefined ? null : { partnerPid: v.partner_pid }),
                ...(v.payment_type === undefined ? null : { paymentType: v.payment_type }),
                ...(v.people === undefined ? null : { people: v.people }),
                ...(v.pid === undefined ? null : { pid: v.pid }),
                ...(v.promoted_for === undefined ? null : { promotedFor: v.promoted_for }),
                ...(v.q === undefined ? null : { q: v.q }),
                ...(v.signed === undefined ? null : { signed: v.signed }),
                ...(v.tag_name === undefined ? null : { tagName: v.tag_name }),
                ...(v.tag_scheme === undefined ? null : { tagScheme: v.tag_scheme }),
                ...(v.tleo === undefined ? null : { tleo: v.tleo }),
                ...(v.version === undefined ? null : { version: v.version }),
                ...(v.embargoed === undefined ? null : { embargoed: v.embargoed }),
            };
        });

    export type Outbound = {
        sort?: string | undefined;
        sort_direction?: string | undefined;
        mixin?: Array<string> | undefined;
        audio_described?: Array<string> | undefined;
        availability?: Array<string> | undefined;
        availability_entity_type?: Array<string> | undefined;
        availability_from?: string | undefined;
        availability_type?: Array<string> | undefined;
        children_of?: Array<string> | undefined;
        descendants_of?: Array<string> | undefined;
        duration?: Array<string> | undefined;
        entity_type?: Array<string> | undefined;
        format?: Array<string> | undefined;
        genre?: Array<string> | undefined;
        group?: string | undefined;
        initial_letter?: string | undefined;
        initial_letter_end?: string | undefined;
        initial_letter_start?: string | undefined;
        initial_letter_strict?: Array<string> | undefined;
        item?: Array<string> | undefined;
        master_brand?: Array<string> | undefined;
        media_set?: string | undefined;
        media_type?: Array<string> | undefined;
        page: number;
        page_size: number;
        partner_id?: Array<string> | undefined;
        partner_pid?: Array<string> | undefined;
        payment_type?: Array<string> | undefined;
        people?: string | undefined;
        pid?: Array<string> | undefined;
        promoted_for?: string | undefined;
        q?: string | undefined;
        signed?: Array<string> | undefined;
        tag_name?: string | undefined;
        tag_scheme?: string | undefined;
        tleo?: Array<string> | undefined;
        version?: Array<string> | undefined;
        embargoed?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListProgrammesRequest> = z
        .object({
            sort: ListProgrammesQueryParamSort$.outboundSchema.optional(),
            sortDirection: ListProgrammesQueryParamSortDirection$.outboundSchema.optional(),
            mixin: z.array(ListProgrammesQueryParamMixin$.outboundSchema).optional(),
            audioDescribed: z.array(AudioDescribed$.outboundSchema).optional(),
            availability: z.array(QueryParamAvailability$.outboundSchema).optional(),
            availabilityEntityType: z.array(AvailabilityEntityType$.outboundSchema).optional(),
            availabilityFrom: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            availabilityType: z.array(AvailabilityType$.outboundSchema).optional(),
            childrenOf: z.array(z.string()).optional(),
            descendantsOf: z.array(z.string()).optional(),
            duration: z.array(Duration$.outboundSchema).optional(),
            entityType: z.array(EntityType$.outboundSchema).optional(),
            format: z.array(z.string()).optional(),
            genre: z.array(z.string()).optional(),
            group: z.string().optional(),
            initialLetter: z.string().optional(),
            initialLetterEnd: z.string().optional(),
            initialLetterStart: z.string().optional(),
            initialLetterStrict: z.array(z.string()).optional(),
            item: z.array(z.string()).optional(),
            masterBrand: z.array(z.string()).optional(),
            mediaSet: z.string().optional(),
            mediaType: z.array(MediaType$.outboundSchema).optional(),
            page: z.number().int().default(1),
            pageSize: z.number().int().default(10),
            partnerId: z.array(z.string()).optional(),
            partnerPid: z.array(z.string()).optional(),
            paymentType: z.array(PaymentType$.outboundSchema).optional(),
            people: z.string().optional(),
            pid: z.array(z.string()).optional(),
            promotedFor: z.string().optional(),
            q: z.string().optional(),
            signed: z.array(Signed$.outboundSchema).optional(),
            tagName: z.string().optional(),
            tagScheme: z.string().optional(),
            tleo: z.array(Tleo$.outboundSchema).optional(),
            version: z.array(z.string()).optional(),
            embargoed: ListProgrammesQueryParamEmbargoed$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.sortDirection === undefined ? null : { sort_direction: v.sortDirection }),
                ...(v.mixin === undefined ? null : { mixin: v.mixin }),
                ...(v.audioDescribed === undefined ? null : { audio_described: v.audioDescribed }),
                ...(v.availability === undefined ? null : { availability: v.availability }),
                ...(v.availabilityEntityType === undefined
                    ? null
                    : { availability_entity_type: v.availabilityEntityType }),
                ...(v.availabilityFrom === undefined
                    ? null
                    : { availability_from: v.availabilityFrom }),
                ...(v.availabilityType === undefined
                    ? null
                    : { availability_type: v.availabilityType }),
                ...(v.childrenOf === undefined ? null : { children_of: v.childrenOf }),
                ...(v.descendantsOf === undefined ? null : { descendants_of: v.descendantsOf }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.entityType === undefined ? null : { entity_type: v.entityType }),
                ...(v.format === undefined ? null : { format: v.format }),
                ...(v.genre === undefined ? null : { genre: v.genre }),
                ...(v.group === undefined ? null : { group: v.group }),
                ...(v.initialLetter === undefined ? null : { initial_letter: v.initialLetter }),
                ...(v.initialLetterEnd === undefined
                    ? null
                    : { initial_letter_end: v.initialLetterEnd }),
                ...(v.initialLetterStart === undefined
                    ? null
                    : { initial_letter_start: v.initialLetterStart }),
                ...(v.initialLetterStrict === undefined
                    ? null
                    : { initial_letter_strict: v.initialLetterStrict }),
                ...(v.item === undefined ? null : { item: v.item }),
                ...(v.masterBrand === undefined ? null : { master_brand: v.masterBrand }),
                ...(v.mediaSet === undefined ? null : { media_set: v.mediaSet }),
                ...(v.mediaType === undefined ? null : { media_type: v.mediaType }),
                page: v.page,
                page_size: v.pageSize,
                ...(v.partnerId === undefined ? null : { partner_id: v.partnerId }),
                ...(v.partnerPid === undefined ? null : { partner_pid: v.partnerPid }),
                ...(v.paymentType === undefined ? null : { payment_type: v.paymentType }),
                ...(v.people === undefined ? null : { people: v.people }),
                ...(v.pid === undefined ? null : { pid: v.pid }),
                ...(v.promotedFor === undefined ? null : { promoted_for: v.promotedFor }),
                ...(v.q === undefined ? null : { q: v.q }),
                ...(v.signed === undefined ? null : { signed: v.signed }),
                ...(v.tagName === undefined ? null : { tag_name: v.tagName }),
                ...(v.tagScheme === undefined ? null : { tag_scheme: v.tagScheme }),
                ...(v.tleo === undefined ? null : { tleo: v.tleo }),
                ...(v.version === undefined ? null : { version: v.version }),
                ...(v.embargoed === undefined ? null : { embargoed: v.embargoed }),
            };
        });
}

/** @internal */
export namespace ListProgrammesResponse$ {
    export const inboundSchema: z.ZodType<ListProgrammesResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            nitro: components.Nitro$.inboundSchema.optional(),
            Body: b64$.zodInbound.optional(),
            ErrorModel: components.ErrorModel$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.Body === undefined ? null : { body: v.Body }),
                ...(v.ErrorModel === undefined ? null : { errorModel: v.ErrorModel }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        nitro?: components.Nitro$.Outbound | undefined;
        Body?: Uint8Array | undefined;
        ErrorModel?: components.ErrorModel$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListProgrammesResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            nitro: components.Nitro$.outboundSchema.optional(),
            body: b64$.zodOutbound.optional(),
            errorModel: components.ErrorModel$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.body === undefined ? null : { Body: v.body }),
                ...(v.errorModel === undefined ? null : { ErrorModel: v.errorModel }),
            };
        });
}
