/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import * as components from "../components";
import * as z from "zod";

export type ListProgrammeDetailsRequest = {
    /**
     * which page of results to return
     */
    page?: number | undefined;
    /**
     * number of results in each page
     */
    pageSize?: number | undefined;
    /**
     * Filter for programme information by partner PID
     */
    partnerPid?: string | undefined;
    /**
     * Filter for programme information for the provided PID
     */
    pid?: string | undefined;
};

export type ListProgrammeDetailsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Nitro response
     */
    nitro?: components.Nitro | undefined;
    body?: Uint8Array | string | undefined;
    /**
     * Unexpected error
     */
    errorModel?: components.ErrorModel | undefined;
};

/** @internal */
export namespace ListProgrammeDetailsRequest$ {
    export const inboundSchema: z.ZodType<ListProgrammeDetailsRequest, z.ZodTypeDef, unknown> = z
        .object({
            page: z.number().int().default(1),
            page_size: z.number().int().default(10),
            partner_pid: z.string().optional(),
            pid: z.string().optional(),
        })
        .transform((v) => {
            return {
                page: v.page,
                pageSize: v.page_size,
                ...(v.partner_pid === undefined ? null : { partnerPid: v.partner_pid }),
                ...(v.pid === undefined ? null : { pid: v.pid }),
            };
        });

    export type Outbound = {
        page: number;
        page_size: number;
        partner_pid?: string | undefined;
        pid?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListProgrammeDetailsRequest> = z
        .object({
            page: z.number().int().default(1),
            pageSize: z.number().int().default(10),
            partnerPid: z.string().optional(),
            pid: z.string().optional(),
        })
        .transform((v) => {
            return {
                page: v.page,
                page_size: v.pageSize,
                ...(v.partnerPid === undefined ? null : { partner_pid: v.partnerPid }),
                ...(v.pid === undefined ? null : { pid: v.pid }),
            };
        });
}

/** @internal */
export namespace ListProgrammeDetailsResponse$ {
    export const inboundSchema: z.ZodType<ListProgrammeDetailsResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            nitro: components.Nitro$.inboundSchema.optional(),
            Body: b64$.zodInbound.optional(),
            ErrorModel: components.ErrorModel$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.Body === undefined ? null : { body: v.Body }),
                ...(v.ErrorModel === undefined ? null : { errorModel: v.ErrorModel }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        nitro?: components.Nitro$.Outbound | undefined;
        Body?: Uint8Array | undefined;
        ErrorModel?: components.ErrorModel$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListProgrammeDetailsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            nitro: components.Nitro$.outboundSchema.optional(),
            body: b64$.zodOutbound.optional(),
            errorModel: components.ErrorModel$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.body === undefined ? null : { Body: v.body }),
                ...(v.errorModel === undefined ? null : { ErrorModel: v.errorModel }),
            };
        });
}
