/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import * as components from "../components";
import * as z from "zod";

/**
 * Sorts:
 *
 * @remarks
 * * group_position: sort numerically by position, ascending only
 * * pid: sort alphabetically by PID
 *
 */
export enum ListImagesQueryParamSort {
    GroupPosition = "group_position",
    Pid = "pid",
}

/**
 * Sort direction
 */
export enum ListImagesQueryParamSortDirection {
    Ascending = "ascending",
    Descending = "descending",
}

export enum ImageType {
    Standard = "standard",
    Podcast = "podcast",
    Store = "store",
    Portrait = "portrait",
    Letterbox = "letterbox",
}

/**
 * Control return of embargoed items (undocumented)
 */
export enum QueryParamEmbargoed {
    Include = "include",
    Exclude = "exclude",
    Only = "only",
}

export type ListImagesRequest = {
    /**
     * Sorts:
     *
     * @remarks
     * * group_position: sort numerically by position, ascending only
     * * pid: sort alphabetically by PID
     *
     */
    sort?: ListImagesQueryParamSort | undefined;
    /**
     * Sort direction
     */
    sortDirection?: ListImagesQueryParamSortDirection | undefined;
    /**
     * filter for images belonging to the given group (i.e. Gallery)
     */
    group?: string | undefined;
    /**
     * filter for images by type
     */
    imageType?: Array<ImageType> | undefined;
    /**
     * filter for alternate images by entity PID
     */
    isAlternateImageFor?: string | undefined;
    /**
     * filter for images by entity PID
     */
    isImageFor?: string | undefined;
    /**
     * which page of results to return
     */
    page?: number | undefined;
    /**
     * number of results in each page
     */
    pageSize?: number | undefined;
    /**
     * filter for images by partner ID
     */
    partnerId?: Array<string> | undefined;
    /**
     * filter for images by partner PID
     */
    partnerPid?: Array<string> | undefined;
    /**
     * filter for subset of images having given PID
     */
    pid?: Array<string> | undefined;
    /**
     * filter for subset of images matching supplied keyword/phrase (boolean operators permitted)
     */
    q?: string | undefined;
    /**
     * Control return of embargoed items (undocumented)
     */
    embargoed?: QueryParamEmbargoed | undefined;
};

export type ListImagesResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Nitro response
     */
    nitro?: components.Nitro | undefined;
    body?: Uint8Array | string | undefined;
    /**
     * Unexpected error
     */
    errorModel?: components.ErrorModel | undefined;
};

/** @internal */
export namespace ListImagesQueryParamSort$ {
    export const inboundSchema = z.nativeEnum(ListImagesQueryParamSort);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListImagesQueryParamSortDirection$ {
    export const inboundSchema = z.nativeEnum(ListImagesQueryParamSortDirection);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ImageType$ {
    export const inboundSchema = z.nativeEnum(ImageType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace QueryParamEmbargoed$ {
    export const inboundSchema = z.nativeEnum(QueryParamEmbargoed);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListImagesRequest$ {
    export const inboundSchema: z.ZodType<ListImagesRequest, z.ZodTypeDef, unknown> = z
        .object({
            sort: ListImagesQueryParamSort$.inboundSchema.optional(),
            sort_direction: ListImagesQueryParamSortDirection$.inboundSchema.optional(),
            group: z.string().optional(),
            image_type: z.array(ImageType$.inboundSchema).optional(),
            is_alternate_image_for: z.string().optional(),
            is_image_for: z.string().optional(),
            page: z.number().int().default(1),
            page_size: z.number().int().default(10),
            partner_id: z.array(z.string()).optional(),
            partner_pid: z.array(z.string()).optional(),
            pid: z.array(z.string()).optional(),
            q: z.string().optional(),
            embargoed: QueryParamEmbargoed$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.sort_direction === undefined ? null : { sortDirection: v.sort_direction }),
                ...(v.group === undefined ? null : { group: v.group }),
                ...(v.image_type === undefined ? null : { imageType: v.image_type }),
                ...(v.is_alternate_image_for === undefined
                    ? null
                    : { isAlternateImageFor: v.is_alternate_image_for }),
                ...(v.is_image_for === undefined ? null : { isImageFor: v.is_image_for }),
                page: v.page,
                pageSize: v.page_size,
                ...(v.partner_id === undefined ? null : { partnerId: v.partner_id }),
                ...(v.partner_pid === undefined ? null : { partnerPid: v.partner_pid }),
                ...(v.pid === undefined ? null : { pid: v.pid }),
                ...(v.q === undefined ? null : { q: v.q }),
                ...(v.embargoed === undefined ? null : { embargoed: v.embargoed }),
            };
        });

    export type Outbound = {
        sort?: string | undefined;
        sort_direction?: string | undefined;
        group?: string | undefined;
        image_type?: Array<string> | undefined;
        is_alternate_image_for?: string | undefined;
        is_image_for?: string | undefined;
        page: number;
        page_size: number;
        partner_id?: Array<string> | undefined;
        partner_pid?: Array<string> | undefined;
        pid?: Array<string> | undefined;
        q?: string | undefined;
        embargoed?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListImagesRequest> = z
        .object({
            sort: ListImagesQueryParamSort$.outboundSchema.optional(),
            sortDirection: ListImagesQueryParamSortDirection$.outboundSchema.optional(),
            group: z.string().optional(),
            imageType: z.array(ImageType$.outboundSchema).optional(),
            isAlternateImageFor: z.string().optional(),
            isImageFor: z.string().optional(),
            page: z.number().int().default(1),
            pageSize: z.number().int().default(10),
            partnerId: z.array(z.string()).optional(),
            partnerPid: z.array(z.string()).optional(),
            pid: z.array(z.string()).optional(),
            q: z.string().optional(),
            embargoed: QueryParamEmbargoed$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.sortDirection === undefined ? null : { sort_direction: v.sortDirection }),
                ...(v.group === undefined ? null : { group: v.group }),
                ...(v.imageType === undefined ? null : { image_type: v.imageType }),
                ...(v.isAlternateImageFor === undefined
                    ? null
                    : { is_alternate_image_for: v.isAlternateImageFor }),
                ...(v.isImageFor === undefined ? null : { is_image_for: v.isImageFor }),
                page: v.page,
                page_size: v.pageSize,
                ...(v.partnerId === undefined ? null : { partner_id: v.partnerId }),
                ...(v.partnerPid === undefined ? null : { partner_pid: v.partnerPid }),
                ...(v.pid === undefined ? null : { pid: v.pid }),
                ...(v.q === undefined ? null : { q: v.q }),
                ...(v.embargoed === undefined ? null : { embargoed: v.embargoed }),
            };
        });
}

/** @internal */
export namespace ListImagesResponse$ {
    export const inboundSchema: z.ZodType<ListImagesResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            nitro: components.Nitro$.inboundSchema.optional(),
            Body: b64$.zodInbound.optional(),
            ErrorModel: components.ErrorModel$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.Body === undefined ? null : { body: v.Body }),
                ...(v.ErrorModel === undefined ? null : { errorModel: v.ErrorModel }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        nitro?: components.Nitro$.Outbound | undefined;
        Body?: Uint8Array | undefined;
        ErrorModel?: components.ErrorModel$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListImagesResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            nitro: components.Nitro$.outboundSchema.optional(),
            body: b64$.zodOutbound.optional(),
            errorModel: components.ErrorModel$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.body === undefined ? null : { Body: v.body }),
                ...(v.errorModel === undefined ? null : { ErrorModel: v.errorModel }),
            };
        });
}
