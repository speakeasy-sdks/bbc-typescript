/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import * as components from "../components";
import * as z from "zod";

export type GetRawEpisodeRequest = {
    pid: string;
};

export type GetRawEpisodeResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Nitro response
     */
    nitro?: components.Nitro | undefined;
    body?: Uint8Array | string | undefined;
};

/** @internal */
export namespace GetRawEpisodeRequest$ {
    export const inboundSchema: z.ZodType<GetRawEpisodeRequest, z.ZodTypeDef, unknown> = z
        .object({
            pid: z.string(),
        })
        .transform((v) => {
            return {
                pid: v.pid,
            };
        });

    export type Outbound = {
        pid: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetRawEpisodeRequest> = z
        .object({
            pid: z.string(),
        })
        .transform((v) => {
            return {
                pid: v.pid,
            };
        });
}

/** @internal */
export namespace GetRawEpisodeResponse$ {
    export const inboundSchema: z.ZodType<GetRawEpisodeResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            nitro: components.Nitro$.inboundSchema.optional(),
            Body: b64$.zodInbound.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.Body === undefined ? null : { body: v.Body }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        nitro?: components.Nitro$.Outbound | undefined;
        Body?: Uint8Array | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetRawEpisodeResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            nitro: components.Nitro$.outboundSchema.optional(),
            body: b64$.zodOutbound.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.body === undefined ? null : { Body: v.body }),
            };
        });
}
