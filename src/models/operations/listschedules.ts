/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import { RFCDate } from "../../types";
import * as components from "../components";
import * as z from "zod";

/**
 * Sorts:
 *
 * @remarks
 * * start_date: sort chronologically by scheduled start time/date, ascending
 *
 */
export enum ListSchedulesQueryParamSort {
    StartDate = "start_date",
}

/**
 * Sort direction
 */
export enum ListSchedulesQueryParamSortDirection {
    Ascending = "ascending",
    Descending = "descending",
}

export enum ListSchedulesQueryParamMixin {
    AncestorTitles = "ancestor_titles",
    Images = "images",
    Titles = "titles",
}

export type ListSchedulesRequest = {
    /**
     * Sorts:
     *
     * @remarks
     * * start_date: sort chronologically by scheduled start time/date, ascending
     *
     */
    sort?: ListSchedulesQueryParamSort | undefined;
    /**
     * Sort direction
     */
    sortDirection?: ListSchedulesQueryParamSortDirection | undefined;
    /**
     * Mixins:
     *
     * @remarks
     * * ancestor_titles: return ancestor programme titles
     * * images: mixin to add image information for broadcasts and webcasts
     * * titles: return ancestor programme titles
     *
     */
    mixin?: Array<ListSchedulesQueryParamMixin> | undefined;
    /**
     * filter for subset of broadcasts and webcasts that have given authority
     */
    authority?: Array<string> | undefined;
    /**
     * filter for subset of broadcasts and webcasts that are descendants of the given programme PID
     */
    descendantsOf?: Array<string> | undefined;
    /**
     * filter for subset of broadcasts and webcasts that end on or later than the specified datetime
     */
    endFrom?: Date | undefined;
    /**
     * filter for subset of broadcasts and webcasts that end on or earlier than the specified datetime
     */
    endTo?: Date | undefined;
    /**
     * filter for subset of broadcasts and webcasts that are classified in the given format ID
     */
    format?: Array<string> | undefined;
    /**
     * filter for subset of broadcasts and webcasts that are classified in the given genre ID
     */
    genre?: Array<string> | undefined;
    /**
     * filter for subset of broadcasts and webcasts that have programmes in the given group
     */
    group?: string | undefined;
    /**
     * filter for subset of broadcasts and webcasts that have given identifier
     */
    id?: Array<string> | undefined;
    /**
     * filter for subset of broadcasts and webcasts that have given id type
     */
    idType?: Array<string> | undefined;
    /**
     * filter for subset of broadcasts and webcasts with the given item performed on it
     */
    item?: Array<string> | undefined;
    /**
     * which page of results to return
     */
    page?: number | undefined;
    /**
     * number of results in each page
     */
    pageSize?: number | undefined;
    /**
     * filter for broadcasts and webcasts by partner ID
     */
    partnerId?: Array<string> | undefined;
    /**
     * filter for broadcasts and webcasts by partner PID
     */
    partnerPid?: Array<string> | undefined;
    /**
     * filter for subset of broadcasts and webcasts that have given contributor
     */
    people?: string | undefined;
    /**
     * filter for subset of broadcasts and webcasts having given PID
     */
    pid?: Array<string> | undefined;
    /**
     * filter for subset of broadcasts and webcasts matching supplied keyword/phrase (boolean operators permitted)
     */
    q?: string | undefined;
    /**
     * filter to show either only repeats or non-repeats
     */
    repeat?: boolean | undefined;
    /**
     * filter for subset of broadcasts and webcasts that start on the specified day (BBC time)
     */
    scheduleDay?: RFCDate | undefined;
    /**
     * filter for subset of broadcasts and webcasts that start on or after the specified day (BBC time)
     */
    scheduleDayFrom?: RFCDate | undefined;
    /**
     * filter for subset of broadcasts and webcasts that start on or before the specified day (BBC time)
     */
    scheduleDayTo?: RFCDate | undefined;
    /**
     * filter for subset of broadcasts and webcasts with given service master brand
     */
    serviceMasterBrand?: Array<string> | undefined;
    /**
     * filter for subset of broadcasts and webcasts that are on the specified linear service
     */
    sid?: Array<string> | undefined;
    /**
     * filter for subset of broadcasts and webcasts that start on or later than the specified datetime
     */
    startFrom?: Date | undefined;
    /**
     * filter for subset of broadcasts and webcasts that start on or earlier than the specified datetime
     */
    startTo?: Date | undefined;
    /**
     * filter for subset of broadcasts and webcasts with given PID as their parent version
     */
    version?: Array<string> | undefined;
};

export type ListSchedulesResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Nitro response
     */
    nitro?: components.Nitro | undefined;
    body?: Uint8Array | string | undefined;
    /**
     * Unexpected error
     */
    errorModel?: components.ErrorModel | undefined;
};

/** @internal */
export namespace ListSchedulesQueryParamSort$ {
    export const inboundSchema = z.nativeEnum(ListSchedulesQueryParamSort);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListSchedulesQueryParamSortDirection$ {
    export const inboundSchema = z.nativeEnum(ListSchedulesQueryParamSortDirection);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListSchedulesQueryParamMixin$ {
    export const inboundSchema = z.nativeEnum(ListSchedulesQueryParamMixin);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListSchedulesRequest$ {
    export const inboundSchema: z.ZodType<ListSchedulesRequest, z.ZodTypeDef, unknown> = z
        .object({
            sort: ListSchedulesQueryParamSort$.inboundSchema.optional(),
            sort_direction: ListSchedulesQueryParamSortDirection$.inboundSchema.optional(),
            mixin: z.array(ListSchedulesQueryParamMixin$.inboundSchema).optional(),
            authority: z.array(z.string()).optional(),
            descendants_of: z.array(z.string()).optional(),
            end_from: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            end_to: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            format: z.array(z.string()).optional(),
            genre: z.array(z.string()).optional(),
            group: z.string().optional(),
            id: z.array(z.string()).optional(),
            id_type: z.array(z.string()).optional(),
            item: z.array(z.string()).optional(),
            page: z.number().int().default(1),
            page_size: z.number().int().default(10),
            partner_id: z.array(z.string()).optional(),
            partner_pid: z.array(z.string()).optional(),
            people: z.string().optional(),
            pid: z.array(z.string()).optional(),
            q: z.string().optional(),
            repeat: z.boolean().optional(),
            schedule_day: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            schedule_day_from: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            schedule_day_to: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            service_master_brand: z.array(z.string()).optional(),
            sid: z.array(z.string()).optional(),
            start_from: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            start_to: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            version: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.sort_direction === undefined ? null : { sortDirection: v.sort_direction }),
                ...(v.mixin === undefined ? null : { mixin: v.mixin }),
                ...(v.authority === undefined ? null : { authority: v.authority }),
                ...(v.descendants_of === undefined ? null : { descendantsOf: v.descendants_of }),
                ...(v.end_from === undefined ? null : { endFrom: v.end_from }),
                ...(v.end_to === undefined ? null : { endTo: v.end_to }),
                ...(v.format === undefined ? null : { format: v.format }),
                ...(v.genre === undefined ? null : { genre: v.genre }),
                ...(v.group === undefined ? null : { group: v.group }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.id_type === undefined ? null : { idType: v.id_type }),
                ...(v.item === undefined ? null : { item: v.item }),
                page: v.page,
                pageSize: v.page_size,
                ...(v.partner_id === undefined ? null : { partnerId: v.partner_id }),
                ...(v.partner_pid === undefined ? null : { partnerPid: v.partner_pid }),
                ...(v.people === undefined ? null : { people: v.people }),
                ...(v.pid === undefined ? null : { pid: v.pid }),
                ...(v.q === undefined ? null : { q: v.q }),
                ...(v.repeat === undefined ? null : { repeat: v.repeat }),
                ...(v.schedule_day === undefined ? null : { scheduleDay: v.schedule_day }),
                ...(v.schedule_day_from === undefined
                    ? null
                    : { scheduleDayFrom: v.schedule_day_from }),
                ...(v.schedule_day_to === undefined ? null : { scheduleDayTo: v.schedule_day_to }),
                ...(v.service_master_brand === undefined
                    ? null
                    : { serviceMasterBrand: v.service_master_brand }),
                ...(v.sid === undefined ? null : { sid: v.sid }),
                ...(v.start_from === undefined ? null : { startFrom: v.start_from }),
                ...(v.start_to === undefined ? null : { startTo: v.start_to }),
                ...(v.version === undefined ? null : { version: v.version }),
            };
        });

    export type Outbound = {
        sort?: string | undefined;
        sort_direction?: string | undefined;
        mixin?: Array<string> | undefined;
        authority?: Array<string> | undefined;
        descendants_of?: Array<string> | undefined;
        end_from?: string | undefined;
        end_to?: string | undefined;
        format?: Array<string> | undefined;
        genre?: Array<string> | undefined;
        group?: string | undefined;
        id?: Array<string> | undefined;
        id_type?: Array<string> | undefined;
        item?: Array<string> | undefined;
        page: number;
        page_size: number;
        partner_id?: Array<string> | undefined;
        partner_pid?: Array<string> | undefined;
        people?: string | undefined;
        pid?: Array<string> | undefined;
        q?: string | undefined;
        repeat?: boolean | undefined;
        schedule_day?: string | undefined;
        schedule_day_from?: string | undefined;
        schedule_day_to?: string | undefined;
        service_master_brand?: Array<string> | undefined;
        sid?: Array<string> | undefined;
        start_from?: string | undefined;
        start_to?: string | undefined;
        version?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListSchedulesRequest> = z
        .object({
            sort: ListSchedulesQueryParamSort$.outboundSchema.optional(),
            sortDirection: ListSchedulesQueryParamSortDirection$.outboundSchema.optional(),
            mixin: z.array(ListSchedulesQueryParamMixin$.outboundSchema).optional(),
            authority: z.array(z.string()).optional(),
            descendantsOf: z.array(z.string()).optional(),
            endFrom: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            endTo: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            format: z.array(z.string()).optional(),
            genre: z.array(z.string()).optional(),
            group: z.string().optional(),
            id: z.array(z.string()).optional(),
            idType: z.array(z.string()).optional(),
            item: z.array(z.string()).optional(),
            page: z.number().int().default(1),
            pageSize: z.number().int().default(10),
            partnerId: z.array(z.string()).optional(),
            partnerPid: z.array(z.string()).optional(),
            people: z.string().optional(),
            pid: z.array(z.string()).optional(),
            q: z.string().optional(),
            repeat: z.boolean().optional(),
            scheduleDay: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            scheduleDayFrom: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            scheduleDayTo: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            serviceMasterBrand: z.array(z.string()).optional(),
            sid: z.array(z.string()).optional(),
            startFrom: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            startTo: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            version: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.sortDirection === undefined ? null : { sort_direction: v.sortDirection }),
                ...(v.mixin === undefined ? null : { mixin: v.mixin }),
                ...(v.authority === undefined ? null : { authority: v.authority }),
                ...(v.descendantsOf === undefined ? null : { descendants_of: v.descendantsOf }),
                ...(v.endFrom === undefined ? null : { end_from: v.endFrom }),
                ...(v.endTo === undefined ? null : { end_to: v.endTo }),
                ...(v.format === undefined ? null : { format: v.format }),
                ...(v.genre === undefined ? null : { genre: v.genre }),
                ...(v.group === undefined ? null : { group: v.group }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.idType === undefined ? null : { id_type: v.idType }),
                ...(v.item === undefined ? null : { item: v.item }),
                page: v.page,
                page_size: v.pageSize,
                ...(v.partnerId === undefined ? null : { partner_id: v.partnerId }),
                ...(v.partnerPid === undefined ? null : { partner_pid: v.partnerPid }),
                ...(v.people === undefined ? null : { people: v.people }),
                ...(v.pid === undefined ? null : { pid: v.pid }),
                ...(v.q === undefined ? null : { q: v.q }),
                ...(v.repeat === undefined ? null : { repeat: v.repeat }),
                ...(v.scheduleDay === undefined ? null : { schedule_day: v.scheduleDay }),
                ...(v.scheduleDayFrom === undefined
                    ? null
                    : { schedule_day_from: v.scheduleDayFrom }),
                ...(v.scheduleDayTo === undefined ? null : { schedule_day_to: v.scheduleDayTo }),
                ...(v.serviceMasterBrand === undefined
                    ? null
                    : { service_master_brand: v.serviceMasterBrand }),
                ...(v.sid === undefined ? null : { sid: v.sid }),
                ...(v.startFrom === undefined ? null : { start_from: v.startFrom }),
                ...(v.startTo === undefined ? null : { start_to: v.startTo }),
                ...(v.version === undefined ? null : { version: v.version }),
            };
        });
}

/** @internal */
export namespace ListSchedulesResponse$ {
    export const inboundSchema: z.ZodType<ListSchedulesResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            nitro: components.Nitro$.inboundSchema.optional(),
            Body: b64$.zodInbound.optional(),
            ErrorModel: components.ErrorModel$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.Body === undefined ? null : { body: v.Body }),
                ...(v.ErrorModel === undefined ? null : { errorModel: v.ErrorModel }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        nitro?: components.Nitro$.Outbound | undefined;
        Body?: Uint8Array | undefined;
        ErrorModel?: components.ErrorModel$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListSchedulesResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            nitro: components.Nitro$.outboundSchema.optional(),
            body: b64$.zodOutbound.optional(),
            errorModel: components.ErrorModel$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.body === undefined ? null : { Body: v.body }),
                ...(v.errorModel === undefined ? null : { ErrorModel: v.errorModel }),
            };
        });
}
