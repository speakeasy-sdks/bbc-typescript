/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import * as components from "../components";
import * as z from "zod";

/**
 * Sorts:
 *
 * @remarks
 * * mid: sort by mid, ascending
 *
 */
export enum ListMasterbrandsQueryParamSort {
    Mid = "mid",
}

/**
 * Sort direction
 */
export enum ListMasterbrandsQueryParamSortDirection {
    Ascending = "ascending",
}

export enum ListMasterbrandsQueryParamMixin {
    Images = "images",
}

export type ListMasterbrandsRequest = {
    /**
     * Sorts:
     *
     * @remarks
     * * mid: sort by mid, ascending
     *
     */
    sort?: ListMasterbrandsQueryParamSort | undefined;
    /**
     * Sort direction
     */
    sortDirection?: ListMasterbrandsQueryParamSortDirection | undefined;
    /**
     * Mixins:
     *
     * @remarks
     * * images: mixin to add image information for a masterbrand
     *
     */
    mixin?: Array<ListMasterbrandsQueryParamMixin> | undefined;
    /**
     * filter for subset of masterbrands that have given identifier
     */
    mid?: Array<string> | undefined;
    /**
     * which page of results to return
     */
    page?: number | undefined;
    /**
     * number of results in each page
     */
    pageSize?: number | undefined;
    /**
     * filter for masterbrands by partner ID
     */
    partnerId?: Array<string> | undefined;
    /**
     * filter for masterbrands by partner PID
     */
    partnerPid?: Array<string> | undefined;
    /**
     * filter for subset of masterbrands matching supplied keyword/phrase (boolean operators permitted)
     */
    q?: string | undefined;
};

export type ListMasterbrandsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Nitro response
     */
    nitro?: components.Nitro | undefined;
    body?: Uint8Array | string | undefined;
    /**
     * Unexpected error
     */
    errorModel?: components.ErrorModel | undefined;
};

/** @internal */
export namespace ListMasterbrandsQueryParamSort$ {
    export const inboundSchema = z.nativeEnum(ListMasterbrandsQueryParamSort);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListMasterbrandsQueryParamSortDirection$ {
    export const inboundSchema = z.nativeEnum(ListMasterbrandsQueryParamSortDirection);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListMasterbrandsQueryParamMixin$ {
    export const inboundSchema = z.nativeEnum(ListMasterbrandsQueryParamMixin);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListMasterbrandsRequest$ {
    export const inboundSchema: z.ZodType<ListMasterbrandsRequest, z.ZodTypeDef, unknown> = z
        .object({
            sort: ListMasterbrandsQueryParamSort$.inboundSchema.optional(),
            sort_direction: ListMasterbrandsQueryParamSortDirection$.inboundSchema.optional(),
            mixin: z.array(ListMasterbrandsQueryParamMixin$.inboundSchema).optional(),
            mid: z.array(z.string()).optional(),
            page: z.number().int().default(1),
            page_size: z.number().int().default(10),
            partner_id: z.array(z.string()).optional(),
            partner_pid: z.array(z.string()).optional(),
            q: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.sort_direction === undefined ? null : { sortDirection: v.sort_direction }),
                ...(v.mixin === undefined ? null : { mixin: v.mixin }),
                ...(v.mid === undefined ? null : { mid: v.mid }),
                page: v.page,
                pageSize: v.page_size,
                ...(v.partner_id === undefined ? null : { partnerId: v.partner_id }),
                ...(v.partner_pid === undefined ? null : { partnerPid: v.partner_pid }),
                ...(v.q === undefined ? null : { q: v.q }),
            };
        });

    export type Outbound = {
        sort?: string | undefined;
        sort_direction?: string | undefined;
        mixin?: Array<string> | undefined;
        mid?: Array<string> | undefined;
        page: number;
        page_size: number;
        partner_id?: Array<string> | undefined;
        partner_pid?: Array<string> | undefined;
        q?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListMasterbrandsRequest> = z
        .object({
            sort: ListMasterbrandsQueryParamSort$.outboundSchema.optional(),
            sortDirection: ListMasterbrandsQueryParamSortDirection$.outboundSchema.optional(),
            mixin: z.array(ListMasterbrandsQueryParamMixin$.outboundSchema).optional(),
            mid: z.array(z.string()).optional(),
            page: z.number().int().default(1),
            pageSize: z.number().int().default(10),
            partnerId: z.array(z.string()).optional(),
            partnerPid: z.array(z.string()).optional(),
            q: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.sortDirection === undefined ? null : { sort_direction: v.sortDirection }),
                ...(v.mixin === undefined ? null : { mixin: v.mixin }),
                ...(v.mid === undefined ? null : { mid: v.mid }),
                page: v.page,
                page_size: v.pageSize,
                ...(v.partnerId === undefined ? null : { partner_id: v.partnerId }),
                ...(v.partnerPid === undefined ? null : { partner_pid: v.partnerPid }),
                ...(v.q === undefined ? null : { q: v.q }),
            };
        });
}

/** @internal */
export namespace ListMasterbrandsResponse$ {
    export const inboundSchema: z.ZodType<ListMasterbrandsResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            nitro: components.Nitro$.inboundSchema.optional(),
            Body: b64$.zodInbound.optional(),
            ErrorModel: components.ErrorModel$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.Body === undefined ? null : { body: v.Body }),
                ...(v.ErrorModel === undefined ? null : { errorModel: v.ErrorModel }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        nitro?: components.Nitro$.Outbound | undefined;
        Body?: Uint8Array | undefined;
        ErrorModel?: components.ErrorModel$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListMasterbrandsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            nitro: components.Nitro$.outboundSchema.optional(),
            body: b64$.zodOutbound.optional(),
            errorModel: components.ErrorModel$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.body === undefined ? null : { Body: v.body }),
                ...(v.errorModel === undefined ? null : { ErrorModel: v.errorModel }),
            };
        });
}
