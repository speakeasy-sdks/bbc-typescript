/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import * as components from "../components";
import * as z from "zod";

export enum ListPromotionsQueryParamMixin {
    RelatedLinks = "related_links",
}

export enum Status {
    Current = "current",
}

export type ListPromotionsRequest = {
    /**
     * Mixins:
     *
     * @remarks
     * * related_links: mixin to return information about related links to a promotion
     *
     */
    mixin?: Array<ListPromotionsQueryParamMixin> | undefined;
    /**
     * filter for subset of promotions belonging to a given context
     */
    context?: string | undefined;
    /**
     * which page of results to return
     */
    page?: number | undefined;
    /**
     * number of results in each page
     */
    pageSize?: number | undefined;
    /**
     * filter for promotions by partner ID
     */
    partnerId?: Array<string> | undefined;
    /**
     * filter for promotions by partner PID
     */
    partnerPid?: Array<string> | undefined;
    /**
     * filter for subset of promotions having given PID
     */
    pid?: Array<string> | undefined;
    /**
     * filter for subset of promotions having given promoted by
     */
    promotedBy?: Array<string> | undefined;
    /**
     * filter for subset of promotions having given promoted for
     */
    promotedFor?: Array<string> | undefined;
    /**
     * filter for subset of promotions matching supplied keyword/phrase (boolean operators permitted)
     */
    q?: string | undefined;
    /**
     * filter for subset of promotions with status
     */
    status?: Array<Status> | undefined;
};

export type ListPromotionsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Nitro response
     */
    nitro?: components.Nitro | undefined;
    body?: Uint8Array | string | undefined;
    /**
     * Unexpected error
     */
    errorModel?: components.ErrorModel | undefined;
};

/** @internal */
export namespace ListPromotionsQueryParamMixin$ {
    export const inboundSchema = z.nativeEnum(ListPromotionsQueryParamMixin);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Status$ {
    export const inboundSchema = z.nativeEnum(Status);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListPromotionsRequest$ {
    export const inboundSchema: z.ZodType<ListPromotionsRequest, z.ZodTypeDef, unknown> = z
        .object({
            mixin: z.array(ListPromotionsQueryParamMixin$.inboundSchema).optional(),
            context: z.string().optional(),
            page: z.number().int().default(1),
            page_size: z.number().int().default(10),
            partner_id: z.array(z.string()).optional(),
            partner_pid: z.array(z.string()).optional(),
            pid: z.array(z.string()).optional(),
            promoted_by: z.array(z.string()).optional(),
            promoted_for: z.array(z.string()).optional(),
            q: z.string().optional(),
            status: z.array(Status$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.mixin === undefined ? null : { mixin: v.mixin }),
                ...(v.context === undefined ? null : { context: v.context }),
                page: v.page,
                pageSize: v.page_size,
                ...(v.partner_id === undefined ? null : { partnerId: v.partner_id }),
                ...(v.partner_pid === undefined ? null : { partnerPid: v.partner_pid }),
                ...(v.pid === undefined ? null : { pid: v.pid }),
                ...(v.promoted_by === undefined ? null : { promotedBy: v.promoted_by }),
                ...(v.promoted_for === undefined ? null : { promotedFor: v.promoted_for }),
                ...(v.q === undefined ? null : { q: v.q }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        mixin?: Array<string> | undefined;
        context?: string | undefined;
        page: number;
        page_size: number;
        partner_id?: Array<string> | undefined;
        partner_pid?: Array<string> | undefined;
        pid?: Array<string> | undefined;
        promoted_by?: Array<string> | undefined;
        promoted_for?: Array<string> | undefined;
        q?: string | undefined;
        status?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPromotionsRequest> = z
        .object({
            mixin: z.array(ListPromotionsQueryParamMixin$.outboundSchema).optional(),
            context: z.string().optional(),
            page: z.number().int().default(1),
            pageSize: z.number().int().default(10),
            partnerId: z.array(z.string()).optional(),
            partnerPid: z.array(z.string()).optional(),
            pid: z.array(z.string()).optional(),
            promotedBy: z.array(z.string()).optional(),
            promotedFor: z.array(z.string()).optional(),
            q: z.string().optional(),
            status: z.array(Status$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.mixin === undefined ? null : { mixin: v.mixin }),
                ...(v.context === undefined ? null : { context: v.context }),
                page: v.page,
                page_size: v.pageSize,
                ...(v.partnerId === undefined ? null : { partner_id: v.partnerId }),
                ...(v.partnerPid === undefined ? null : { partner_pid: v.partnerPid }),
                ...(v.pid === undefined ? null : { pid: v.pid }),
                ...(v.promotedBy === undefined ? null : { promoted_by: v.promotedBy }),
                ...(v.promotedFor === undefined ? null : { promoted_for: v.promotedFor }),
                ...(v.q === undefined ? null : { q: v.q }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

/** @internal */
export namespace ListPromotionsResponse$ {
    export const inboundSchema: z.ZodType<ListPromotionsResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            nitro: components.Nitro$.inboundSchema.optional(),
            Body: b64$.zodInbound.optional(),
            ErrorModel: components.ErrorModel$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.Body === undefined ? null : { body: v.Body }),
                ...(v.ErrorModel === undefined ? null : { errorModel: v.ErrorModel }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        nitro?: components.Nitro$.Outbound | undefined;
        Body?: Uint8Array | undefined;
        ErrorModel?: components.ErrorModel$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPromotionsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            nitro: components.Nitro$.outboundSchema.optional(),
            body: b64$.zodOutbound.optional(),
            errorModel: components.ErrorModel$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.body === undefined ? null : { Body: v.body }),
                ...(v.errorModel === undefined ? null : { ErrorModel: v.errorModel }),
            };
        });
}
