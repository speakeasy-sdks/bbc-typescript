/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import * as components from "../components";
import * as z from "zod";

export enum ServiceType {
    Interactive = "Interactive",
    LocalRadio = "Local Radio",
    MasterBrandOnly = "Master Brand Only",
    NationalRadio = "National Radio",
    OnDemand = "On Demand",
    RegionalRadio = "Regional Radio",
    Simulcast = "Simulcast",
    Tv = "TV",
    WebOnly = "Web Only",
    Webcast = "Webcast",
}

export type ListServicesRequest = {
    /**
     * Return services that end on or later than the specified datetime
     */
    endFrom?: Date | undefined;
    /**
     * filter for subset of broadcasts that end on or earlier than the specified datetime
     */
    endTo?: Date | undefined;
    /**
     * filter for services by masterbrand MID
     */
    mid?: Array<string> | undefined;
    /**
     * which page of results to return
     */
    page?: number | undefined;
    /**
     * number of results in each page
     */
    pageSize?: number | undefined;
    /**
     * filter for services by partner ID
     */
    partnerId?: Array<string> | undefined;
    /**
     * filter for services by partner PID
     */
    partnerPid?: Array<string> | undefined;
    /**
     * filter for subset of services matching supplied keyword/phrase (boolean operators permitted)
     */
    q?: string | undefined;
    /**
     * filter for specified type of linear services
     */
    serviceType?: Array<ServiceType> | undefined;
    /**
     * filter for specified linear service
     */
    sid?: Array<string> | undefined;
    /**
     * Return services that start on or later than the specified datetime
     */
    startFrom?: Date | undefined;
    /**
     * Return services that start earlier than the specified datetime
     */
    startTo?: Date | undefined;
};

export type ListServicesResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Nitro response
     */
    nitro?: components.Nitro | undefined;
    body?: Uint8Array | string | undefined;
    /**
     * Unexpected error
     */
    errorModel?: components.ErrorModel | undefined;
};

/** @internal */
export namespace ServiceType$ {
    export const inboundSchema = z.nativeEnum(ServiceType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListServicesRequest$ {
    export const inboundSchema: z.ZodType<ListServicesRequest, z.ZodTypeDef, unknown> = z
        .object({
            end_from: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            end_to: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            mid: z.array(z.string()).optional(),
            page: z.number().int().default(1),
            page_size: z.number().int().default(10),
            partner_id: z.array(z.string()).optional(),
            partner_pid: z.array(z.string()).optional(),
            q: z.string().optional(),
            service_type: z.array(ServiceType$.inboundSchema).optional(),
            sid: z.array(z.string()).optional(),
            start_from: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            start_to: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.end_from === undefined ? null : { endFrom: v.end_from }),
                ...(v.end_to === undefined ? null : { endTo: v.end_to }),
                ...(v.mid === undefined ? null : { mid: v.mid }),
                page: v.page,
                pageSize: v.page_size,
                ...(v.partner_id === undefined ? null : { partnerId: v.partner_id }),
                ...(v.partner_pid === undefined ? null : { partnerPid: v.partner_pid }),
                ...(v.q === undefined ? null : { q: v.q }),
                ...(v.service_type === undefined ? null : { serviceType: v.service_type }),
                ...(v.sid === undefined ? null : { sid: v.sid }),
                ...(v.start_from === undefined ? null : { startFrom: v.start_from }),
                ...(v.start_to === undefined ? null : { startTo: v.start_to }),
            };
        });

    export type Outbound = {
        end_from?: string | undefined;
        end_to?: string | undefined;
        mid?: Array<string> | undefined;
        page: number;
        page_size: number;
        partner_id?: Array<string> | undefined;
        partner_pid?: Array<string> | undefined;
        q?: string | undefined;
        service_type?: Array<string> | undefined;
        sid?: Array<string> | undefined;
        start_from?: string | undefined;
        start_to?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListServicesRequest> = z
        .object({
            endFrom: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            endTo: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            mid: z.array(z.string()).optional(),
            page: z.number().int().default(1),
            pageSize: z.number().int().default(10),
            partnerId: z.array(z.string()).optional(),
            partnerPid: z.array(z.string()).optional(),
            q: z.string().optional(),
            serviceType: z.array(ServiceType$.outboundSchema).optional(),
            sid: z.array(z.string()).optional(),
            startFrom: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            startTo: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.endFrom === undefined ? null : { end_from: v.endFrom }),
                ...(v.endTo === undefined ? null : { end_to: v.endTo }),
                ...(v.mid === undefined ? null : { mid: v.mid }),
                page: v.page,
                page_size: v.pageSize,
                ...(v.partnerId === undefined ? null : { partner_id: v.partnerId }),
                ...(v.partnerPid === undefined ? null : { partner_pid: v.partnerPid }),
                ...(v.q === undefined ? null : { q: v.q }),
                ...(v.serviceType === undefined ? null : { service_type: v.serviceType }),
                ...(v.sid === undefined ? null : { sid: v.sid }),
                ...(v.startFrom === undefined ? null : { start_from: v.startFrom }),
                ...(v.startTo === undefined ? null : { start_to: v.startTo }),
            };
        });
}

/** @internal */
export namespace ListServicesResponse$ {
    export const inboundSchema: z.ZodType<ListServicesResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            nitro: components.Nitro$.inboundSchema.optional(),
            Body: b64$.zodInbound.optional(),
            ErrorModel: components.ErrorModel$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.Body === undefined ? null : { body: v.Body }),
                ...(v.ErrorModel === undefined ? null : { errorModel: v.ErrorModel }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        nitro?: components.Nitro$.Outbound | undefined;
        Body?: Uint8Array | undefined;
        ErrorModel?: components.ErrorModel$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListServicesResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            nitro: components.Nitro$.outboundSchema.optional(),
            body: b64$.zodOutbound.optional(),
            errorModel: components.ErrorModel$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.body === undefined ? null : { Body: v.body }),
                ...(v.errorModel === undefined ? null : { ErrorModel: v.errorModel }),
            };
        });
}
