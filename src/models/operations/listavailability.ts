/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import * as components from "../components";
import * as z from "zod";

/**
 * Sorts:
 *
 * @remarks
 * * scheduled_start: sort chronologically by scheduled start time/date, ascending
 *
 */
export enum Sort {
    ScheduledStart = "scheduled_start",
}

/**
 * Sort direction
 */
export enum SortDirection {
    Ascending = "ascending",
    Descending = "descending",
}

export enum Availability {
    Available = "available",
}

export enum Territory {
    Uk = "uk",
    Nonuk = "nonuk",
    World = "world",
}

export type ListAvailabilityRequest = {
    /**
     * Sorts:
     *
     * @remarks
     * * scheduled_start: sort chronologically by scheduled start time/date, ascending
     *
     */
    sort?: Sort | undefined;
    /**
     * Sort direction
     */
    sortDirection?: SortDirection | undefined;
    /**
     * filter for subset of availabilities
     */
    availability?: Array<Availability> | undefined;
    /**
     * filter for subset of availabilities that have PID as ancestor
     */
    descendantsOf?: Array<string> | undefined;
    /**
     * filter for subset of availabilities with media set
     */
    mediaSet?: Array<string> | undefined;
    /**
     * which page of results to return
     */
    page?: number | undefined;
    /**
     * number of results in each page
     */
    pageSize?: number | undefined;
    /**
     * filter for availabilities in given territory
     */
    territory?: Array<Territory> | undefined;
    /**
     * Turn on debug information (undocumented)
     */
    debug?: boolean | undefined;
};

export type ListAvailabilityResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Nitro response
     */
    nitro?: components.Nitro | undefined;
    body?: Uint8Array | string | undefined;
    /**
     * Unexpected error
     */
    errorModel?: components.ErrorModel | undefined;
};

/** @internal */
export namespace Sort$ {
    export const inboundSchema = z.nativeEnum(Sort);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace SortDirection$ {
    export const inboundSchema = z.nativeEnum(SortDirection);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Availability$ {
    export const inboundSchema = z.nativeEnum(Availability);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Territory$ {
    export const inboundSchema = z.nativeEnum(Territory);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListAvailabilityRequest$ {
    export const inboundSchema: z.ZodType<ListAvailabilityRequest, z.ZodTypeDef, unknown> = z
        .object({
            sort: Sort$.inboundSchema.optional(),
            sort_direction: SortDirection$.inboundSchema.optional(),
            availability: z.array(Availability$.inboundSchema).optional(),
            descendants_of: z.array(z.string()).optional(),
            media_set: z.array(z.string()).optional(),
            page: z.number().int().default(1),
            page_size: z.number().int().default(10),
            territory: z.array(Territory$.inboundSchema).optional(),
            debug: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.sort_direction === undefined ? null : { sortDirection: v.sort_direction }),
                ...(v.availability === undefined ? null : { availability: v.availability }),
                ...(v.descendants_of === undefined ? null : { descendantsOf: v.descendants_of }),
                ...(v.media_set === undefined ? null : { mediaSet: v.media_set }),
                page: v.page,
                pageSize: v.page_size,
                ...(v.territory === undefined ? null : { territory: v.territory }),
                ...(v.debug === undefined ? null : { debug: v.debug }),
            };
        });

    export type Outbound = {
        sort?: string | undefined;
        sort_direction?: string | undefined;
        availability?: Array<string> | undefined;
        descendants_of?: Array<string> | undefined;
        media_set?: Array<string> | undefined;
        page: number;
        page_size: number;
        territory?: Array<string> | undefined;
        debug?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListAvailabilityRequest> = z
        .object({
            sort: Sort$.outboundSchema.optional(),
            sortDirection: SortDirection$.outboundSchema.optional(),
            availability: z.array(Availability$.outboundSchema).optional(),
            descendantsOf: z.array(z.string()).optional(),
            mediaSet: z.array(z.string()).optional(),
            page: z.number().int().default(1),
            pageSize: z.number().int().default(10),
            territory: z.array(Territory$.outboundSchema).optional(),
            debug: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.sortDirection === undefined ? null : { sort_direction: v.sortDirection }),
                ...(v.availability === undefined ? null : { availability: v.availability }),
                ...(v.descendantsOf === undefined ? null : { descendants_of: v.descendantsOf }),
                ...(v.mediaSet === undefined ? null : { media_set: v.mediaSet }),
                page: v.page,
                page_size: v.pageSize,
                ...(v.territory === undefined ? null : { territory: v.territory }),
                ...(v.debug === undefined ? null : { debug: v.debug }),
            };
        });
}

/** @internal */
export namespace ListAvailabilityResponse$ {
    export const inboundSchema: z.ZodType<ListAvailabilityResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            nitro: components.Nitro$.inboundSchema.optional(),
            Body: b64$.zodInbound.optional(),
            ErrorModel: components.ErrorModel$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.Body === undefined ? null : { body: v.Body }),
                ...(v.ErrorModel === undefined ? null : { errorModel: v.ErrorModel }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        nitro?: components.Nitro$.Outbound | undefined;
        Body?: Uint8Array | undefined;
        ErrorModel?: components.ErrorModel$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListAvailabilityResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            nitro: components.Nitro$.outboundSchema.optional(),
            body: b64$.zodOutbound.optional(),
            errorModel: components.ErrorModel$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.body === undefined ? null : { Body: v.body }),
                ...(v.errorModel === undefined ? null : { ErrorModel: v.errorModel }),
            };
        });
}
