/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import * as components from "../components";
import * as z from "zod";

export enum ListVersionsQueryParamAvailability {
    Available = "available",
}

export enum QueryParamPaymentType {
    Free = "free",
    Bbcstore = "bbcstore",
    Uscansvod = "uscansvod",
}

/**
 * Control return of embargoed items (undocumented)
 */
export enum ListVersionsQueryParamEmbargoed {
    Include = "include",
    Exclude = "exclude",
    Only = "only",
}

export type ListVersionsRequest = {
    /**
     * filter for subset of versions that have availability
     */
    availability?: Array<ListVersionsQueryParamAvailability> | undefined;
    /**
     * filter for subset of versions having given programme PID
     */
    descendantsOf?: Array<string> | undefined;
    /**
     * filter for subset of versions with availability in the given media set
     */
    mediaSet?: Array<string> | undefined;
    /**
     * which page of results to return
     */
    page?: number | undefined;
    /**
     * number of results in each page
     */
    pageSize?: number | undefined;
    /**
     * filter for versions by partner ID
     */
    partnerId?: Array<string> | undefined;
    /**
     * filter for versions by partner PID
     */
    partnerPid?: Array<string> | undefined;
    /**
     * filter for a subset of versions that are of the given payment_type
     */
    paymentType?: Array<QueryParamPaymentType> | undefined;
    /**
     * filter for subset of versions having given PID
     */
    pid?: Array<string> | undefined;
    /**
     * Control return of embargoed items (undocumented)
     */
    embargoed?: ListVersionsQueryParamEmbargoed | undefined;
};

export type ListVersionsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Nitro response
     */
    nitro?: components.Nitro | undefined;
    body?: Uint8Array | string | undefined;
    /**
     * Unexpected error
     */
    errorModel?: components.ErrorModel | undefined;
};

/** @internal */
export namespace ListVersionsQueryParamAvailability$ {
    export const inboundSchema = z.nativeEnum(ListVersionsQueryParamAvailability);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace QueryParamPaymentType$ {
    export const inboundSchema = z.nativeEnum(QueryParamPaymentType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListVersionsQueryParamEmbargoed$ {
    export const inboundSchema = z.nativeEnum(ListVersionsQueryParamEmbargoed);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListVersionsRequest$ {
    export const inboundSchema: z.ZodType<ListVersionsRequest, z.ZodTypeDef, unknown> = z
        .object({
            availability: z.array(ListVersionsQueryParamAvailability$.inboundSchema).optional(),
            descendants_of: z.array(z.string()).optional(),
            media_set: z.array(z.string()).optional(),
            page: z.number().int().default(1),
            page_size: z.number().int().default(10),
            partner_id: z.array(z.string()).optional(),
            partner_pid: z.array(z.string()).optional(),
            payment_type: z.array(QueryParamPaymentType$.inboundSchema).optional(),
            pid: z.array(z.string()).optional(),
            embargoed: ListVersionsQueryParamEmbargoed$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.availability === undefined ? null : { availability: v.availability }),
                ...(v.descendants_of === undefined ? null : { descendantsOf: v.descendants_of }),
                ...(v.media_set === undefined ? null : { mediaSet: v.media_set }),
                page: v.page,
                pageSize: v.page_size,
                ...(v.partner_id === undefined ? null : { partnerId: v.partner_id }),
                ...(v.partner_pid === undefined ? null : { partnerPid: v.partner_pid }),
                ...(v.payment_type === undefined ? null : { paymentType: v.payment_type }),
                ...(v.pid === undefined ? null : { pid: v.pid }),
                ...(v.embargoed === undefined ? null : { embargoed: v.embargoed }),
            };
        });

    export type Outbound = {
        availability?: Array<string> | undefined;
        descendants_of?: Array<string> | undefined;
        media_set?: Array<string> | undefined;
        page: number;
        page_size: number;
        partner_id?: Array<string> | undefined;
        partner_pid?: Array<string> | undefined;
        payment_type?: Array<string> | undefined;
        pid?: Array<string> | undefined;
        embargoed?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListVersionsRequest> = z
        .object({
            availability: z.array(ListVersionsQueryParamAvailability$.outboundSchema).optional(),
            descendantsOf: z.array(z.string()).optional(),
            mediaSet: z.array(z.string()).optional(),
            page: z.number().int().default(1),
            pageSize: z.number().int().default(10),
            partnerId: z.array(z.string()).optional(),
            partnerPid: z.array(z.string()).optional(),
            paymentType: z.array(QueryParamPaymentType$.outboundSchema).optional(),
            pid: z.array(z.string()).optional(),
            embargoed: ListVersionsQueryParamEmbargoed$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.availability === undefined ? null : { availability: v.availability }),
                ...(v.descendantsOf === undefined ? null : { descendants_of: v.descendantsOf }),
                ...(v.mediaSet === undefined ? null : { media_set: v.mediaSet }),
                page: v.page,
                page_size: v.pageSize,
                ...(v.partnerId === undefined ? null : { partner_id: v.partnerId }),
                ...(v.partnerPid === undefined ? null : { partner_pid: v.partnerPid }),
                ...(v.paymentType === undefined ? null : { payment_type: v.paymentType }),
                ...(v.pid === undefined ? null : { pid: v.pid }),
                ...(v.embargoed === undefined ? null : { embargoed: v.embargoed }),
            };
        });
}

/** @internal */
export namespace ListVersionsResponse$ {
    export const inboundSchema: z.ZodType<ListVersionsResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            nitro: components.Nitro$.inboundSchema.optional(),
            Body: b64$.zodInbound.optional(),
            ErrorModel: components.ErrorModel$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.Body === undefined ? null : { body: v.Body }),
                ...(v.ErrorModel === undefined ? null : { errorModel: v.ErrorModel }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        nitro?: components.Nitro$.Outbound | undefined;
        Body?: Uint8Array | undefined;
        ErrorModel?: components.ErrorModel$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListVersionsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            nitro: components.Nitro$.outboundSchema.optional(),
            body: b64$.zodOutbound.optional(),
            errorModel: components.ErrorModel$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.nitro === undefined ? null : { nitro: v.nitro }),
                ...(v.body === undefined ? null : { Body: v.body }),
                ...(v.errorModel === undefined ? null : { ErrorModel: v.errorModel }),
            };
        });
}
